"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[5891],{47726:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var s=i(74848),t=i(28453);const l={id:"python-01",title:"\ud83d\udc0d 01. Lists",sidebar_position:1},r="01. Lists",a={id:"notes/Information Technology/Python/python-01",title:"\ud83d\udc0d 01. Lists",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/01_lists.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-01",permalink:"/MindMash/docs/notes/Information Technology/Python/python-01",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"python-01",title:"\ud83d\udc0d 01. Lists",sidebar_position:1},sidebar:"notesSidebar",previous:{title:"\ud83d\udcd6 Precision, Recall, F1-Score",permalink:"/MindMash/docs/notes/Information Technology/Artificial Intelligence/\ud83d\uddc3\ufe0f Unsorted Notes/ai-01"},next:{title:"\ud83d\udc0d 02. Tuples",permalink:"/MindMash/docs/notes/Information Technology/Python/python-02"}},o={},c=[{value:"1. Overview of Python Lists",id:"1-overview-of-python-lists",level:2},{value:"2. Comparison with Other Built-in Collection Types",id:"2-comparison-with-other-built-in-collection-types",level:2},{value:"3. Creating Lists",id:"3-creating-lists",level:2},{value:"3.1 Using Square Brackets",id:"31-using-square-brackets",level:3},{value:"3.2 Using the <code>list()</code> Constructor",id:"32-using-the-list-constructor",level:3},{value:"3.3 Mixed Data Types",id:"33-mixed-data-types",level:3},{value:"3.4 Duplicate Elements",id:"34-duplicate-elements",level:3},{value:"4. Accessing List Elements",id:"4-accessing-list-elements",level:2},{value:"4.1 Negative Indexing",id:"41-negative-indexing",level:3},{value:"5. Modifying List Items",id:"5-modifying-list-items",level:2},{value:"6. Useful List Methods",id:"6-useful-list-methods",level:2},{value:"7. Copying Lists",id:"7-copying-lists",level:2},{value:"8. Iterating Over Lists",id:"8-iterating-over-lists",level:2},{value:"9. Checking for Existence of an Item",id:"9-checking-for-existence-of-an-item",level:2},{value:"10. Slicing Lists",id:"10-slicing-lists",level:2},{value:"11. List Comprehensions",id:"11-list-comprehensions",level:2},{value:"12. Nested Lists",id:"12-nested-lists",level:2},{value:"13. Additional Points and Best Practices",id:"13-additional-points-and-best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"01-lists",children:"01. Lists"})}),"\n",(0,s.jsx)("iframe",{src:"https://www.youtube.com/embed/QLTdOEn79Rc",title:"Lists in Python - Advanced Python 01 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,s.jsxs)(n.p,{children:["Original Link: ",(0,s.jsx)(n.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-overview-of-python-lists",children:"1. Overview of Python Lists"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"list"})," is a built-in collection data type in Python. It has the following characteristics:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ordered"}),": The items have a defined order, and that order will not change unless you explicitly do so (e.g., by sorting or reassigning)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mutable"}),": You can add, remove, and modify items within the list after it is created."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Allows duplicates"}),": Lists may contain duplicate elements."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Lists are typically used for preserving a sequence of data items and iterating over them. They are created using square brackets or the ",(0,s.jsx)(n.code,{children:"list()"})," constructor."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'my_list = ["banana", "cherry", "apple"]\nmy_list_2 = list()  # creates an empty list\nmy_list_3 = [5, True, "apple"]  # lists can store mixed data types\nmy_list_4 = [0, 0, 1, 1]  # lists can contain duplicates\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-comparison-with-other-built-in-collection-types",children:"2. Comparison with Other Built-in Collection Types"}),"\n",(0,s.jsx)(n.p,{children:"Python provides several collection data types, each with unique characteristics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"List"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ordered"}),"\n",(0,s.jsx)(n.li,{children:"Mutable"}),"\n",(0,s.jsx)(n.li,{children:"Allows duplicates"}),"\n",(0,s.jsxs)(n.li,{children:["Syntax: ",(0,s.jsx)(n.code,{children:"[ ]"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Tuple"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ordered"}),"\n",(0,s.jsx)(n.li,{children:"Immutable"}),"\n",(0,s.jsx)(n.li,{children:"Allows duplicates"}),"\n",(0,s.jsxs)(n.li,{children:["Syntax: ",(0,s.jsx)(n.code,{children:"( )"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Set"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unordered"}),"\n",(0,s.jsx)(n.li,{children:"Mutable"}),"\n",(0,s.jsxs)(n.li,{children:["Does ",(0,s.jsx)(n.strong,{children:"not"})," allow duplicates"]}),"\n",(0,s.jsxs)(n.li,{children:["Syntax: ",(0,s.jsx)(n.code,{children:"{ }"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Dictionary"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unordered (in older versions), but generally insertion-ordered in modern Python (3.7+)"}),"\n",(0,s.jsx)(n.li,{children:"Mutable"}),"\n",(0,s.jsx)(n.li,{children:"Indexed by keys"}),"\n",(0,s.jsxs)(n.li,{children:["Does ",(0,s.jsx)(n.strong,{children:"not"})," allow duplicate keys"]}),"\n",(0,s.jsxs)(n.li,{children:["Syntax: ",(0,s.jsx)(n.code,{children:"{key: value}"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"String"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Immutable sequence of characters (Unicode code points)"}),"\n",(0,s.jsx)(n.li,{children:"Can be iterated over like a sequence but cannot be modified in place"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-creating-lists",children:"3. Creating Lists"}),"\n",(0,s.jsx)(n.h3,{id:"31-using-square-brackets",children:"3.1 Using Square Brackets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_1 = [\"banana\", \"cherry\", \"apple\"]\nprint(list_1)  # ['banana', 'cherry', 'apple']\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"32-using-the-list-constructor",children:["3.2 Using the ",(0,s.jsx)(n.code,{children:"list()"})," Constructor"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_2 = list()\nprint(list_2)  # []\n"})}),"\n",(0,s.jsx)(n.h3,{id:"33-mixed-data-types",children:"3.3 Mixed Data Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_3 = [5, True, \"apple\"]\nprint(list_3)  # [5, True, 'apple']\n"})}),"\n",(0,s.jsx)(n.h3,{id:"34-duplicate-elements",children:"3.4 Duplicate Elements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_4 = [0, 0, 1, 1]\nprint(list_4)  # [0, 0, 1, 1]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-accessing-list-elements",children:"4. Accessing List Elements"}),"\n",(0,s.jsx)(n.p,{children:"Lists are zero-indexed, meaning the first element is at index 0."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'list_1 = ["banana", "cherry", "apple"]\nitem = list_1[0]\nprint(item)  # banana\n'})}),"\n",(0,s.jsx)(n.h3,{id:"41-negative-indexing",children:"4.1 Negative Indexing"}),"\n",(0,s.jsxs)(n.p,{children:["Python allows negative indices, where ",(0,s.jsx)(n.code,{children:"-1"})," refers to the last item, ",(0,s.jsx)(n.code,{children:"-2"})," refers to the second-to-last item, and so on."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"item = list_1[-1]\nprint(item)  # apple\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-modifying-list-items",children:"5. Modifying List Items"}),"\n",(0,s.jsx)(n.p,{children:"Lists are mutable, so you can change elements directly by assigning to a specific index."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_1[2] = \"lemon\"\nprint(list_1)  # ['banana', 'cherry', 'lemon']\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-useful-list-methods",children:"6. Useful List Methods"}),"\n",(0,s.jsx)(n.p,{children:"Python\u2019s list methods provide an easy way to add, remove, or inspect elements. Below are some of the most common:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"my_list = [\"banana\", \"cherry\", \"apple\"]\n\n# 1. len(): returns the number of elements\nprint(\"Length:\", len(my_list))  # Length: 3\n\n# 2. append(): adds an element at the end\nmy_list.append(\"orange\")\n\n# 3. insert(): inserts an element at a specific position\nmy_list.insert(1, \"blueberry\")\nprint(my_list)  \n# ['banana', 'blueberry', 'cherry', 'apple', 'orange']\n\n# 4. pop(): removes and returns the item at the given position (last if none specified)\nitem = my_list.pop()\nprint(\"Popped item:\", item)  \n# Popped item: orange\n\n# 5. remove(): removes the first occurrence of a value\nmy_list.remove(\"cherry\")\nprint(my_list)  \n# ['banana', 'blueberry', 'apple']\n\n# 6. clear(): removes all items from the list\nmy_list.clear()\nprint(my_list)  # []\n\n# 7. reverse(): reverses the items in place\nmy_list = [\"banana\", \"cherry\", \"apple\"]\nmy_list.reverse()\nprint(\"Reversed:\", my_list)  \n# Reversed: ['apple', 'cherry', 'banana']\n\n# 8. sort(): sorts the list in ascending order in place\nmy_list.sort()\nprint(\"Sorted:\", my_list)  \n# Sorted: ['apple', 'banana', 'cherry']\n\n# 9. sorted(): returns a new list without modifying the original\nmy_list = [\"banana\", \"cherry\", \"apple\"]\nnew_list = sorted(my_list)\nprint(new_list)  # ['apple', 'banana', 'cherry']\nprint(my_list)   # ['banana', 'cherry', 'apple']\n\n# 10. Other operations\nlist_with_zeros = [0] * 5\nprint(list_with_zeros)  # [0, 0, 0, 0, 0]\n\nlist_concat = list_with_zeros + my_list\nprint(list_concat)  # [0, 0, 0, 0, 0, 'banana', 'cherry', 'apple']\n\nstring_to_list = list(\"Hello\")\nprint(string_to_list)  # ['H', 'e', 'l', 'l', 'o']\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-copying-lists",children:"7. Copying Lists"}),"\n",(0,s.jsxs)(n.p,{children:["Be careful when copying lists in Python. Assigning one list variable to another (using ",(0,s.jsx)(n.code,{children:"="}),") only copies the reference, not the actual list."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_org = [\"banana\", \"cherry\", \"apple\"]\nlist_copy = list_org  # Both variables refer to the same list\nlist_copy.append(True)\nprint(list_copy)  # ['banana', 'cherry', 'apple', True]\nprint(list_org)   # ['banana', 'cherry', 'apple', True]\n"})}),"\n",(0,s.jsx)(n.p,{children:"To actually copy the contents, use one of these approaches:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"copy()"})," method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"list()"})," constructor"]}),"\n",(0,s.jsxs)(n.li,{children:["Slicing (",(0,s.jsx)(n.code,{children:"[:]"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list_org = [\"banana\", \"cherry\", \"apple\"]\nlist_copy = list_org.copy()  \n# Or: list_copy = list(list_org)\n# Or: list_copy = list_org[:]\n\nlist_copy.append(True)\nprint(list_copy)  # ['banana', 'cherry', 'apple', True]\nprint(list_org)   # ['banana', 'cherry', 'apple']\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-iterating-over-lists",children:"8. Iterating Over Lists"}),"\n",(0,s.jsxs)(n.p,{children:["A common pattern is using a ",(0,s.jsx)(n.code,{children:"for ... in"})," loop to iterate over each item:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'list_1 = ["banana", "cherry", "lemon"]\nfor item in list_1:\n    print(item)\n# banana\n# cherry\n# lemon\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"9-checking-for-existence-of-an-item",children:"9. Checking for Existence of an Item"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'if "banana" in list_1:\n    print("yes")\nelse:\n    print("no")\n# yes\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"10-slicing-lists",children:"10. Slicing Lists"}),"\n",(0,s.jsxs)(n.p,{children:["Slicing allows you to extract a sub-part of a list. The syntax is ",(0,s.jsx)(n.code,{children:"[start:stop:step]"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nb = a[1:3]     # from index 1 up to (but not including) 3\nprint(b)       # [2, 3]\n\nb = a[2:]      # from index 2 to the end\nprint(b)       # [3, 4, 5, 6, 7, 8, 9, 10]\n\nb = a[:3]      # from the start up to index 3 (not included)\nprint(b)       # [1, 2, 3]\n\n# Replacing a slice with a single item (you must supply an iterable)\na[0:3] = [0]\nprint(a)       # [0, 4, 5, 6, 7, 8, 9, 10]\n\nb = a[::2]     # from start to end, stepping by 2\nprint(b)       # [0, 5, 7, 9]\n\na = a[::-1]    # reverse the list by negative step\nprint(a)       # [10, 9, 8, 7, 6, 5, 4, 0]\n\nb = a[:]       # copy the list using slicing\nprint(b)       # [10, 9, 8, 7, 6, 5, 4, 0]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"11-list-comprehensions",children:"11. List Comprehensions"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"list comprehension"})," is a concise way to create a new list by applying an expression to each item in an existing sequence:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a = [1, 2, 3, 4, 5, 6, 7, 8]\nb = [i * i for i in a]\nprint(b)  # [1, 4, 9, 16, 25, 36, 49, 64]\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also include conditions within a list comprehension:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"c = [x for x in a if x % 2 == 0]\nprint(c)  # [2, 4, 6, 8]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"12-nested-lists",children:"12. Nested Lists"}),"\n",(0,s.jsx)(n.p,{children:"Lists can contain other lists (as well as other container types), forming a nested or multidimensional structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a = [[1, 2], [3, 4]]\nprint(a)      # [[1, 2], [3, 4]]\nprint(a[0])   # [1, 2]\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"13-additional-points-and-best-practices",children:"13. Additional Points and Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Accessing elements by index is O(1)."}),"\n",(0,s.jsx)(n.li,{children:"Appending to the end of a list is amortized O(1)."}),"\n",(0,s.jsx)(n.li,{children:"Inserting or removing items in the middle can be O(n) (as elements may need to shift)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pitfalls"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Copying a list incorrectly can lead to unexpected changes in both the original and the \u201ccopy\u201d (since they refer to the same list in memory)."}),"\n",(0,s.jsx)(n.li,{children:"Slicing can create new lists, which is useful for creating a real copy."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Reading the Docs"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Consult the official Python documentation for further details on methods, performance, and advanced usage:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/tutorial/datastructures.html",children:"Python List Documentation"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Info",type:"info",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Amortized O(1)"})," means that while a single operation may occasionally take more than constant time, ",(0,s.jsxs)(n.strong,{children:["the ",(0,s.jsx)(n.em,{children:"average"})," time per operation over a sequence of many operations is still constant"]}),"."]}),(0,s.jsx)(n.p,{children:"In the context of Python lists:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Appending to a list is usually O(1) because Python maintains some extra space at the end of the list for future growth."}),"\n",(0,s.jsx)(n.li,{children:"When that space runs out, Python must reallocate the entire list to a new memory location with more space. This reallocation can take O(n) time for that single operation because it involves copying all elements."}),"\n",(0,s.jsxs)(n.li,{children:["However, these costly reallocation events happen ",(0,s.jsx)(n.strong,{children:"infrequently"})," (e.g., when the list grows to a threshold). Most of the time, the append operation is O(1)."]}),"\n",(0,s.jsxs)(n.li,{children:["If you spread out these occasional O(n) reallocations over a large number of appends, the ",(0,s.jsx)(n.strong,{children:"average"})," cost per append becomes O(1)."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Hence, we say that appending to a list is ",(0,s.jsx)(n.strong,{children:"amortized O(1)"}),": the long-term average time per append remains constant, even though individual operations may sometimes take longer."]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Lists"})," in Python are among the most versatile and commonly used data structures. Their mutable nature, support for duplicates, and ease of iteration make them suitable for a wide range of use cases\u2014from simple scripts to complex data processing tasks. By understanding their methods, slicing techniques, and potential pitfalls, you can harness the full power of Python lists in your own projects."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);