"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[6697],{49914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var o=t(74848),r=t(28453);const i={id:"python-07",title:"\ud83d\udc0d 07. Iterators",sidebar_position:8},s="07. Iterators",l={id:"notes/Information Technology/Python/python-07",title:"\ud83d\udc0d 07. Iterators",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/07_iterators.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-07",permalink:"/MindMash/docs/notes/Information Technology/Python/python-07",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"python-07",title:"\ud83d\udc0d 07. Iterators",sidebar_position:8},sidebar:"notesSidebar",previous:{title:"\ud83d\udc0d 06. Collections",permalink:"/MindMash/docs/notes/Information Technology/Python/python-06"},next:{title:"\ud83d\udc0d 08. Lambda",permalink:"/MindMash/docs/notes/Information Technology/Python/python-08"}},c={},a=[{value:"1. Introduction to the <code>itertools</code> Module",id:"1-introduction-to-the-itertools-module",level:2},{value:"2. Infinite Iterators",id:"2-infinite-iterators",level:2},{value:"<code>count(start, step)</code>",id:"countstart-step",level:3},{value:"<code>cycle(iterable)</code>",id:"cycleiterable",level:3},{value:"<code>repeat(object, times)</code>",id:"repeatobject-times",level:3},{value:"3. Iterators Terminating on Input",id:"3-iterators-terminating-on-input",level:2},{value:"<code>product(*iterables, repeat=1)</code>",id:"productiterables-repeat1",level:3},{value:"<code>permutations(iterable, r=None)</code>",id:"permutationsiterable-rnone",level:3},{value:"<code>combinations(iterable, r)</code>",id:"combinationsiterable-r",level:3},{value:"<code>combinations_with_replacement(iterable, r)</code>",id:"combinations_with_replacementiterable-r",level:3},{value:"<strong>Python Examples</strong>",id:"python-examples",level:4},{value:"<strong>Permutations in Python</strong>",id:"permutations-in-python",level:5},{value:"<strong>Combinations in Python</strong>",id:"combinations-in-python",level:5},{value:"4. Specialized Iterators",id:"4-specialized-iterators",level:2},{value:"<code>accumulate(iterable, func=operator.add)</code>",id:"accumulateiterable-funcoperatoradd",level:3},{value:"<code>groupby(iterable, key=None)</code>",id:"groupbyiterable-keynone",level:3},{value:"Deep Dive into <code>groupby(iterable, key=None)</code>",id:"deep-dive-into-groupbyiterable-keynone",level:4},{value:"Key Points:",id:"key-points",level:4},{value:"General Syntax:",id:"general-syntax",level:4},{value:"Detailed Examples",id:"detailed-examples",level:4},{value:"Example 1: Group Consecutive Numbers",id:"example-1-group-consecutive-numbers",level:5},{value:"Example 2: Group Strings by Length",id:"example-2-group-strings-by-length",level:5},{value:"Summary of Insights",id:"summary-of-insights",level:4},{value:"5. Practical Examples of <code>itertools</code>",id:"5-practical-examples-of-itertools",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"07-iterators",children:"07. Iterators"})}),"\n",(0,o.jsx)("iframe",{src:"https://www.youtube.com/embed/3ecISAkioPc",title:"Iterators in Python - Advanced Python 07 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,o.jsxs)(n.p,{children:["Original Link: ",(0,o.jsx)(n.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"1-introduction-to-the-itertools-module",children:["1. Introduction to the ",(0,o.jsx)(n.code,{children:"itertools"})," Module"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"itertools"})," module in Python provides a rich set of tools for working with iterators. Iterators are objects that allow traversal through all elements of a collection (like lists, tuples, or strings) one at a time. The ",(0,o.jsx)(n.code,{children:"itertools"})," module includes functions to construct and manipulate iterators, making complex operations more efficient and concise."]}),"\n",(0,o.jsx)(n.p,{children:"The functions in this module can be grouped into the following categories:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Infinite Iterators"}),": Functions that produce infinite iterators, such as ",(0,o.jsx)(n.code,{children:"count"}),", ",(0,o.jsx)(n.code,{children:"cycle"}),", and ",(0,o.jsx)(n.code,{children:"repeat"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Iterators Terminating on Input"}),": Functions that process finite iterables and return iterators, like ",(0,o.jsx)(n.code,{children:"product"}),", ",(0,o.jsx)(n.code,{children:"permutations"}),", ",(0,o.jsx)(n.code,{children:"combinations"}),", and ",(0,o.jsx)(n.code,{children:"accumulate"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Combinatoric Iterators"}),": Specialized tools to generate combinatorial sets of data efficiently."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For a full reference, visit the ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/itertools.html",children:"official documentation"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"2-infinite-iterators",children:"2. Infinite Iterators"}),"\n",(0,o.jsx)(n.h3,{id:"countstart-step",children:(0,o.jsx)(n.code,{children:"count(start, step)"})}),"\n",(0,o.jsxs)(n.p,{children:["Generates an infinite sequence of evenly spaced values starting from ",(0,o.jsx)(n.code,{children:"start"})," and incremented by ",(0,o.jsx)(n.code,{children:"step"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import count\n\nfor i in count(10, 2):\n    print(i)\n    if i > 20:\n        break\n# Output: 10, 12, 14, 16, 18, 20, 22\n"})}),"\n",(0,o.jsx)(n.h3,{id:"cycleiterable",children:(0,o.jsx)(n.code,{children:"cycle(iterable)"})}),"\n",(0,o.jsx)(n.p,{children:"Creates an infinite loop cycling through the elements of an iterable."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import cycle\n\ncount = 0\nfor item in cycle(['A', 'B', 'C']):\n    print(item)\n    count += 1\n    if count == 6:\n        break\n# Output: A, B, C, A, B, C\n"})}),"\n",(0,o.jsx)(n.h3,{id:"repeatobject-times",children:(0,o.jsx)(n.code,{children:"repeat(object, times)"})}),"\n",(0,o.jsx)(n.p,{children:"Repeats an object infinitely or for a specified number of times."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import repeat\n\nfor item in repeat('Hello', 3):\n    print(item)\n# Output: Hello, Hello, Hello\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"3-iterators-terminating-on-input",children:"3. Iterators Terminating on Input"}),"\n",(0,o.jsx)(n.h3,{id:"productiterables-repeat1",children:(0,o.jsx)(n.code,{children:"product(*iterables, repeat=1)"})}),"\n",(0,o.jsx)(n.p,{children:"Computes the Cartesian product of input iterables, equivalent to nested for-loops."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import product\n\nprod = product([1, 2], [3, 4])\nprint(list(prod))\n# Output: [(1, 3), (1, 4), (2, 3), (2, 4)]\n\nprod = product([1, 2], repeat=2)\nprint(list(prod))\n# Output: [(1, 1), (1, 2), (2, 1), (2, 2)]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"permutationsiterable-rnone",children:(0,o.jsx)(n.code,{children:"permutations(iterable, r=None)"})}),"\n",(0,o.jsxs)(n.p,{children:["Generates all possible permutations (order matters) of ",(0,o.jsx)(n.code,{children:"r"})," elements from the input iterable."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import permutations\n\nperm = permutations([1, 2, 3])\nprint(list(perm))\n# Output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), ...]\n\nperm = permutations([1, 2, 3], 2)\nprint(list(perm))\n# Output: [(1, 2), (1, 3), (2, 1), ...]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"combinationsiterable-r",children:(0,o.jsx)(n.code,{children:"combinations(iterable, r)"})}),"\n",(0,o.jsxs)(n.p,{children:["Generates all combinations (order does not matter) of ",(0,o.jsx)(n.code,{children:"r"})," elements from the iterable."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import combinations\n\ncomb = combinations([1, 2, 3], 2)\nprint(list(comb))\n# Output: [(1, 2), (1, 3), (2, 3)]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"combinations_with_replacementiterable-r",children:(0,o.jsx)(n.code,{children:"combinations_with_replacement(iterable, r)"})}),"\n",(0,o.jsxs)(n.p,{children:["Generates combinations of ",(0,o.jsx)(n.code,{children:"r"})," elements with replacement allowed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import combinations_with_replacement\n\ncomb_wr = combinations_with_replacement([1, 2, 3], 2)\nprint(list(comb_wr))\n# Output: [(1, 1), (1, 2), (1, 3), ...]\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Permutations VS Combinations",type:"info",children:[(0,o.jsxs)(n.p,{children:["Understanding the difference between ",(0,o.jsx)(n.strong,{children:"permutations"})," and ",(0,o.jsx)(n.strong,{children:"combinations"})," can be tricky at first, but the key distinction is whether ",(0,o.jsx)(n.strong,{children:"order matters"}),"."]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Permutations"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Order matters"})}),"."]}),"\n",(0,o.jsx)(n.li,{children:"The arrangement of elements is significant."}),"\n",(0,o.jsxs)(n.li,{children:["Example: Arranging 3 letters ",(0,o.jsx)(n.code,{children:"A"}),", ",(0,o.jsx)(n.code,{children:"B"}),", and ",(0,o.jsx)(n.code,{children:"C"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Permutations: ",(0,o.jsx)(n.code,{children:"ABC"}),", ",(0,o.jsx)(n.code,{children:"ACB"}),", ",(0,o.jsx)(n.code,{children:"BAC"}),", ",(0,o.jsx)(n.code,{children:"BCA"}),", ",(0,o.jsx)(n.code,{children:"CAB"}),", ",(0,o.jsx)(n.code,{children:"CBA"})," (6 possibilities)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Combinations"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Order does not matter"})}),"."]}),"\n",(0,o.jsx)(n.li,{children:"The arrangement is not significant\u2014only the selection counts."}),"\n",(0,o.jsxs)(n.li,{children:["Example: Choosing 2 letters from ",(0,o.jsx)(n.code,{children:"A"}),", ",(0,o.jsx)(n.code,{children:"B"}),", and ",(0,o.jsx)(n.code,{children:"C"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Combinations: ",(0,o.jsx)(n.code,{children:"{A, B}"}),", ",(0,o.jsx)(n.code,{children:"{A, C}"}),", ",(0,o.jsx)(n.code,{children:"{B, C}"})," (3 possibilities)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,o.jsx)(n.h4,{id:"python-examples",children:(0,o.jsx)(n.strong,{children:"Python Examples"})}),(0,o.jsx)(n.h5,{id:"permutations-in-python",children:(0,o.jsx)(n.strong,{children:"Permutations in Python"})}),(0,o.jsxs)(n.p,{children:["In Python, the ",(0,o.jsx)(n.code,{children:"itertools.permutations"})," function generates permutations. Each permutation is a tuple of elements."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import permutations\n\ndata = [1, 2, 3]\n\n# Generate all permutations of length 2\nperm = permutations(data, 2)\nprint(list(perm))\n# Output: [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n"})}),(0,o.jsx)(n.h5,{id:"combinations-in-python",children:(0,o.jsx)(n.strong,{children:"Combinations in Python"})}),(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"itertools.combinations"})," function generates combinations, ignoring the order."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import combinations\n\ndata = [1, 2, 3]\n\n# Generate all combinations of length 2\ncomb = combinations(data, 2)\nprint(list(comb))\n# Output: [(1, 2), (1, 3), (2, 3)]\n"})})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"4-specialized-iterators",children:"4. Specialized Iterators"}),"\n",(0,o.jsx)(n.h3,{id:"accumulateiterable-funcoperatoradd",children:(0,o.jsx)(n.code,{children:"accumulate(iterable, func=operator.add)"})}),"\n",(0,o.jsx)(n.p,{children:"Returns accumulated sums or results of other binary functions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import accumulate\nimport operator\n\nacc = accumulate([1, 2, 3, 4])\nprint(list(acc))\n# Output: [1, 3, 6, 10]\n\nacc = accumulate([1, 2, 3, 4], func=operator.mul)\nprint(list(acc))\n# Output: [1, 2, 6, 24]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"groupbyiterable-keynone",children:(0,o.jsx)(n.code,{children:"groupby(iterable, key=None)"})}),"\n",(0,o.jsx)(n.p,{children:"Groups consecutive elements in an iterable based on a key function."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import groupby\n\ngroup_obj = groupby([1, 2, 2, 3, 4], key=lambda x: x % 2 == 0)\nfor key, group in group_obj:\n    print(key, list(group))\n# Output: False [1]\n#         True [2, 2]\n#         False [3]\n#         True [4]\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"deep-dive-into-groupbyiterable-keynone",children:["Deep Dive into ",(0,o.jsx)(n.code,{children:"groupby(iterable, key=None)"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"groupby()"})," function in Python\u2019s ",(0,o.jsx)(n.code,{children:"itertools"})," module is a tool for grouping consecutive elements of an iterable based on a specified key function. It is particularly useful when working with sorted data."]}),"\n",(0,o.jsx)(n.h4,{id:"key-points",children:"Key Points:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Behavior"}),": ",(0,o.jsx)(n.code,{children:"groupby()"})," only groups ",(0,o.jsx)(n.strong,{children:"consecutive elements"})," sharing the same key. To group all similar elements regardless of order, you need to sort the iterable first."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Output"}),": Yields pairs ",(0,o.jsx)(n.code,{children:"(key, group)"})," where:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"key"})," is the value of the key function for the current group."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"group"})," is an iterator of the elements belonging to the group."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"general-syntax",children:"General Syntax:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"itertools.groupby(iterable, key=None)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"iterable"})}),": Any iterable (e.g., list, tuple, string)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"key"})}),": A function applied to each element to determine its group."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"detailed-examples",children:"Detailed Examples"}),"\n",(0,o.jsx)(n.h5,{id:"example-1-group-consecutive-numbers",children:"Example 1: Group Consecutive Numbers"}),"\n",(0,o.jsx)(n.p,{children:"Group consecutive numbers as even or odd:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from itertools import groupby\n\nnums = [1, 1, 2, 2, 3, 4, 4, 5]\ngrouped = groupby(nums, key=lambda x: x % 2 == 0)\n\nfor is_even, group in grouped:\n    print(f"Even: {is_even}, Group: {list(group)}")\n# Output:\n# Even: False, Group: [1, 1]\n# Even: True, Group: [2, 2]\n# Even: False, Group: [3]\n# Even: True, Group: [4, 4]\n# Even: False, Group: [5]\n'})}),"\n",(0,o.jsx)(n.h5,{id:"example-2-group-strings-by-length",children:"Example 2: Group Strings by Length"}),"\n",(0,o.jsx)(n.p,{children:"Group a list of words based on their length:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'words = ["hello", "hi", "world", "python", "code", "yes"]\ngrouped = groupby(sorted(words, key=len), key=len)\n\nfor length, group in grouped:\n    print(f"Length: {length}, Words: {list(group)}")\n# Output:\n# Length: 2, Words: [\'hi\']\n# Length: 3, Words: [\'yes\']\n# Length: 4, Words: [\'code\']\n# Length: 5, Words: [\'hello\', \'world\']\n# Length: 6, Words: [\'python\']\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Note: ",(0,o.jsx)(n.code,{children:"words"})," was sorted by ",(0,o.jsx)(n.code,{children:"len"})," before using ",(0,o.jsx)(n.code,{children:"groupby"}),". This explains the output."]})}),"\n",(0,o.jsx)(n.h4,{id:"summary-of-insights",children:"Summary of Insights"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Sort Input"}),": To ensure proper grouping, sort the input iterable based on the key function."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Iterate Through Group"}),": Use ",(0,o.jsx)(n.code,{children:"list(group)"})," to consume the group iterator immediately or iterate lazily for performance."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Custom Keys"}),": Key functions can be lambdas, named functions, or attribute access for complex objects."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"5-practical-examples-of-itertools",children:["5. Practical Examples of ",(0,o.jsx)(n.code,{children:"itertools"})]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Efficient Nested Loops"}),":\nUse ",(0,o.jsx)(n.code,{children:"product"})," instead of manual nested loops:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from itertools import product\nfor x, y in product(range(2), range(3)):\n    print(x, y)\n # Output:\n # 0 0\n # 0 1\n # 0 2\n # 1 0\n # 1 1\n # 1 2\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Accumulate with Custom Functions"}),":\nAggregate values with a custom logic:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"acc = accumulate([3, 1, 4, 1, 5, 9], func=max)\nprint(list(acc))\n# Output:\n# [3, 3, 4, 4, 5, 9]\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Data Grouping"}),":\nGroup people by a shared attribute (e.g., age):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"persons = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 30}, {'name': 'Charlie', 'age': 35}]\nfor age, group in groupby(sorted(persons, key=lambda x: x['age']), key=lambda x: x['age']):\n    print(age, list(group))\n# Output:\n# 30 [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 30}]\n# 35 [{'name': 'Charlie', 'age': 35}]\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"itertools"})," module is a powerful companion for handling iterators in Python. By utilizing its tools, you can simplify and optimize your code for operations involving iteration, combinations, and aggregation."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);