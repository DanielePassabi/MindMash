"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[9512],{5660:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=i(74848),t=i(28453);const r={id:"python-06",title:"\ud83d\udc0d 06. Collections",sidebar_position:7},d="06. Collections",o={id:"notes/Information Technology/Python/python-06",title:"\ud83d\udc0d 06. Collections",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/06_python_collections.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-06",permalink:"/MindMash/docs/notes/Information Technology/Python/python-06",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"python-06",title:"\ud83d\udc0d 06. Collections",sidebar_position:7},sidebar:"notesSidebar",previous:{title:"\ud83d\udc0d 05. Strings",permalink:"/MindMash/docs/notes/Information Technology/Python/python-05"},next:{title:"\ud83d\udc0d 07. Iterators",permalink:"/MindMash/docs/notes/Information Technology/Python/python-07"}},l={},c=[{value:"1. Introduction to the <code>collections</code> Module",id:"1-introduction-to-the-collections-module",level:2},{value:"Key Data Structures in <code>collections</code>",id:"key-data-structures-in-collections",level:3},{value:"2. <code>namedtuple</code>",id:"2-namedtuple",level:2},{value:"Why Use <code>namedtuple</code>?",id:"why-use-namedtuple",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"3. <code>OrderedDict</code>",id:"3-ordereddict",level:2},{value:"Why Use <code>OrderedDict</code>?",id:"why-use-ordereddict",level:3},{value:"Basic Usage",id:"basic-usage-1",level:3},{value:"4. <code>Counter</code>",id:"4-counter",level:2},{value:"Why Use <code>Counter</code>?",id:"why-use-counter",level:3},{value:"Basic Usage",id:"basic-usage-2",level:3},{value:"5. <code>defaultdict</code>",id:"5-defaultdict",level:2},{value:"Why Use <code>defaultdict</code>?",id:"why-use-defaultdict",level:3},{value:"Basic Usage",id:"basic-usage-3",level:3},{value:"6. <code>deque</code>",id:"6-deque",level:2},{value:"Why Use <code>deque</code>?",id:"why-use-deque",level:3},{value:"Basic Usage",id:"basic-usage-4",level:3},{value:"Extending, Counting, and Rotating",id:"extending-counting-and-rotating",level:4},{value:"7. Additional Collections in Python 3",id:"7-additional-collections-in-python-3",level:2},{value:"7.1 <code>ChainMap</code>",id:"71-chainmap",level:3},{value:"Example: Using <code>ChainMap</code>",id:"example-using-chainmap",level:4},{value:"7.2 <code>UserDict</code>",id:"72-userdict",level:3},{value:"Example: Subclassing <code>UserDict</code>",id:"example-subclassing-userdict",level:4},{value:"7.3 <code>UserList</code>",id:"73-userlist",level:3},{value:"Example: Subclassing <code>UserList</code>",id:"example-subclassing-userlist",level:4},{value:"7.4 <code>UserString</code>",id:"74-userstring",level:3},{value:"Example: Subclassing <code>UserString</code>",id:"example-subclassing-userstring",level:4},{value:"When to Use These Additional Collections?",id:"when-to-use-these-additional-collections",level:3},{value:"8. Summary and When to Use Which",id:"8-summary-and-when-to-use-which",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"06-collections",children:"06. Collections"})}),"\n",(0,s.jsx)("iframe",{src:"https://www.youtube.com/embed/UdcPhnNjSEw",title:"Collections in Python - Advanced Python 06 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,s.jsxs)(n.p,{children:["Original Link: ",(0,s.jsx)(n.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"1-introduction-to-the-collections-module",children:["1. Introduction to the ",(0,s.jsx)(n.code,{children:"collections"})," Module"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"collections"})," module in Python ",(0,s.jsx)(n.strong,{children:"implements specialized container datatypes"})," that build upon and/or extend the capabilities of Python\u2019s built-in container types (lists, tuples, dicts, and sets). These specialized containers are designed for specific use cases where one of the default data structures may not suffice or might be inefficient."]}),"\n",(0,s.jsxs)(n.h3,{id:"key-data-structures-in-collections",children:["Key Data Structures in ",(0,s.jsx)(n.code,{children:"collections"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namedtuple"})}),": Factory function for creating ",(0,s.jsx)(n.strong,{children:"tuple subclasses"})," with ",(0,s.jsx)(n.strong,{children:"named fields"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OrderedDict"})}),": A dictionary subclass that ",(0,s.jsx)(n.strong,{children:"remembers insertion order"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Counter"})}),": A dictionary subclass designed for ",(0,s.jsx)(n.strong,{children:"counting"})," hashable objects."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"defaultdict"})}),": A dictionary subclass that calls a factory function to ",(0,s.jsx)(n.strong,{children:"supply default values"})," for missing keys."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"deque"})}),": A ",(0,s.jsx)(n.strong,{children:"double-ended queue"})," with fast appends and pops from both ends."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, Python 3 introduced other tools (e.g., ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ChainMap"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserDict"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserList"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserString"})}),"), which can be seen in the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/collections.html",children:"official docs"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"2-namedtuple",children:["2. ",(0,s.jsx)(n.code,{children:"namedtuple"})]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namedtuple"})})," is a factory function for creating tuple-like objects, but with ",(0,s.jsx)(n.strong,{children:"field names"})," and a class name. This improves the readability and self-documentation of code, since you can access the tuple\u2019s items by ",(0,s.jsx)(n.strong,{children:"field name"})," rather than numeric index."]}),"\n",(0,s.jsxs)(n.h3,{id:"why-use-namedtuple",children:["Why Use ",(0,s.jsx)(n.code,{children:"namedtuple"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Maintain the ",(0,s.jsx)(n.strong,{children:"lightweight, immutable"})," properties of tuples."]}),"\n",(0,s.jsxs)(n.li,{children:["Improve code clarity by allowing ",(0,s.jsx)(n.code,{children:"my_tuple.x"})," instead of ",(0,s.jsx)(n.code,{children:"my_tuple[0]"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Provide a quick alternative to creating a full class or data structure for small data objects."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import namedtuple\n\n# Create a namedtuple class 'Point' with fields 'x' and 'y'\nPoint = namedtuple('Point', 'x, y')\n\n# Instantiate\npt = Point(1, -4)\n\nprint(pt)           # Point(x=1, y=-4)\nprint(pt._fields)   # ('x', 'y')\nprint(type(pt))     # <class '__main__.Point'>\nprint(pt.x, pt.y)   # 1 -4\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Common use cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Representing coordinates (",(0,s.jsx)(n.code,{children:"x, y"}),"), geometry points, or other small data structures."]}),"\n",(0,s.jsx)(n.li,{children:"Returning multiple related values from a function in a clear, documented fashion."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can also use a namedtuple for objects like ",(0,s.jsx)(n.code,{children:"Person"}),", ",(0,s.jsx)(n.code,{children:"Car"}),", or similar quick prototypes without building a custom class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Person = namedtuple('Person', 'name, age')\nfriend = Person(name='Tom', age=25)\nprint(friend.name, friend.age)  # Tom 25\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"3-ordereddict",children:["3. ",(0,s.jsx)(n.code,{children:"OrderedDict"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OrderedDict"})})," is a dictionary subclass that ",(0,s.jsx)(n.strong,{children:"remembers the order"})," in which its keys were first inserted. Before Python 3.7, the built-in ",(0,s.jsx)(n.code,{children:"dict"})," did not strictly guarantee insertion order; ",(0,s.jsx)(n.code,{children:"OrderedDict"})," was often used to preserve iteration order. Starting in Python 3.7+, regular dictionaries ",(0,s.jsx)(n.strong,{children:"do"})," remember insertion order as a language feature, making ",(0,s.jsx)(n.code,{children:"OrderedDict"})," less necessary in many cases."]}),"\n",(0,s.jsxs)(n.h3,{id:"why-use-ordereddict",children:["Why Use ",(0,s.jsx)(n.code,{children:"OrderedDict"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You need a dictionary that can be ",(0,s.jsx)(n.strong,{children:"reordered"})," or manipulated for ordering."]}),"\n",(0,s.jsxs)(n.li,{children:["You want to explicitly emphasize and rely on order-related operations (e.g., ",(0,s.jsx)(n.code,{children:"move_to_end"}),", reordering methods)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage-1",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import OrderedDict\n\nordinary_dict = {}\nordinary_dict['a'] = 1\nordinary_dict['b'] = 2\nordinary_dict['c'] = 3\nordinary_dict['d'] = 4\nordinary_dict['e'] = 5\n\nprint(ordinary_dict)\n# For Python 3.7+ => {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\nordered_dict = OrderedDict()\nordered_dict['a'] = 1\nordered_dict['b'] = 2\nordered_dict['c'] = 3\nordered_dict['d'] = 4\nordered_dict['e'] = 5\n\nprint(ordered_dict)\n# OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In older Python versions (pre-3.7), iterating over ",(0,s.jsx)(n.code,{children:"ordinary_dict"})," might yield a different order, but ",(0,s.jsx)(n.code,{children:"OrderedDict"})," guaranteed the insertion order. Even now, you might prefer ",(0,s.jsx)(n.code,{children:"OrderedDict"})," if you want ",(0,s.jsx)(n.strong,{children:"methods"})," like ",(0,s.jsx)(n.code,{children:"move_to_end(key, last=True)"})," or need to reorder the dictionary for some specialized logic."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"4-counter",children:["4. ",(0,s.jsx)(n.code,{children:"Counter"})]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Counter"})})," is a dictionary subclass that\u2019s designed to ",(0,s.jsx)(n.strong,{children:"count"})," hashable objects. The keys are the items (e.g., characters or numbers), and the values represent the ",(0,s.jsx)(n.strong,{children:"counts"})," of those items."]}),"\n",(0,s.jsxs)(n.h3,{id:"why-use-counter",children:["Why Use ",(0,s.jsx)(n.code,{children:"Counter"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Quickly tally or count occurrences of items in a list, string, or other iterable."}),"\n",(0,s.jsx)(n.li,{children:"Obtain the most common elements easily."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage-2",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import Counter\n\na = \"aaaaabbbbcccdde\"\nmy_counter = Counter(a)\nprint(my_counter)\n# Counter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1})\n\nprint(my_counter.items())   # dict_items([('a', 5), ('b', 4), ...])\nprint(my_counter.keys())    # dict_keys(['a', 'b', 'c', 'd', 'e'])\nprint(my_counter.values())  # dict_values([5, 4, 3, 2, 1])\n\nmy_list = [0, 1, 0, 1, 2, 1, 1, 3, 2, 3, 2, 4]\nmy_counter = Counter(my_list)\nprint(my_counter)\n# Counter({1: 4, 2: 3, 0: 2, 3: 2, 4: 1})\n\n# most_common() - get the items with highest count\nprint(my_counter.most_common(1))  # [(1, 4)]\n\n# elements() - iterator of elements repeating as many times as the count\nprint(list(my_counter.elements()))\n# [0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Other features"}),": You can add or subtract Counters, intersect them, or convert them to a regular dict if needed."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"5-defaultdict",children:["5. ",(0,s.jsx)(n.code,{children:"defaultdict"})]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"defaultdict"})})," is a subclass of ",(0,s.jsx)(n.code,{children:"dict"})," that ",(0,s.jsx)(n.strong,{children:"automatically initializes a default value"})," when a key is accessed that does not exist in the dictionary. This saves you from having to check if a key is present or from manually initializing empty collections."]}),"\n",(0,s.jsxs)(n.h3,{id:"why-use-defaultdict",children:["Why Use ",(0,s.jsx)(n.code,{children:"defaultdict"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoid repetitive checks for missing keys."}),"\n",(0,s.jsx)(n.li,{children:"Effortlessly group values (e.g., automatically creating a list when a new key is encountered)."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage-3",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict\n\n# Example 1: default int\nd = defaultdict(int)\nd['yellow'] = 1\nd['blue'] = 2\nprint(d.items())    # dict_items([('yellow', 1), ('blue', 2)])\nprint(d['green'])   # 0, instead of a KeyError\n\n# Example 2: default list\nd = defaultdict(list)\ns = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 5)]\nfor k, v in s:\n    d[k].append(v)\n\nprint(d.items())    # dict_items([('yellow', [1, 3]), ('blue', [2, 4]), ('red', [5])])\nprint(d['green'])   # [] - automatically created list\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Common Use Cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Counting or grouping items without writing extra logic for missing keys."}),"\n",(0,s.jsx)(n.li,{children:"Building adjacency lists in graph algorithms (where each node\u2019s edges can be appended to a list automatically)."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"6-deque",children:["6. ",(0,s.jsx)(n.code,{children:"deque"})]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"deque"})})," (double-ended queue) is a ",(0,s.jsx)(n.strong,{children:"list-like container"})," offering efficient appends and pops from ",(0,s.jsx)(n.strong,{children:"both ends"}),". It\u2019s designed for fast, O(1) insertions/removals at either end, making it ideal for queue or stack implementations."]}),"\n",(0,s.jsxs)(n.h3,{id:"why-use-deque",children:["Why Use ",(0,s.jsx)(n.code,{children:"deque"}),"?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"queues"})," (FIFO) or ",(0,s.jsx)(n.strong,{children:"stacks"})," (LIFO) efficiently."]}),"\n",(0,s.jsxs)(n.li,{children:["Perform ",(0,s.jsx)(n.strong,{children:"popleft()"})," or ",(0,s.jsx)(n.strong,{children:"pop()"})," in constant time, which can be slow on normal lists if done frequently at the left end."]}),"\n",(0,s.jsx)(n.li,{children:"Ideal for sliding window problems or scenarios needing rotation."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage-4",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\nd = deque()\n\n# append() - add to the right end\nd.append('a')\nd.append('b')\nprint(d)  # deque(['a', 'b'])\n\n# appendleft() - add to the left end\nd.appendleft('c')\nprint(d)  # deque(['c', 'a', 'b'])\n\n# pop() - remove and return from the right\nprint(d.pop())  # b\nprint(d)        # deque(['c', 'a'])\n\n# popleft() - remove and return from the left\nprint(d.popleft()) # c\nprint(d)           # deque(['a'])\n\n# clear() - remove all\nd.clear()\nprint(d)           # deque([])\n"})}),"\n",(0,s.jsx)(n.h4,{id:"extending-counting-and-rotating",children:"Extending, Counting, and Rotating"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"d = deque(['a', 'b', 'c', 'd'])\n\n# extend to the right\nd.extend(['e', 'f', 'g'])  \n# now deque(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n\n# extendleft() - adds to the left in the order given\nd.extendleft(['h', 'i', 'j']) \n# note 'j' ends up being the leftmost\n# deque(['j', 'i', 'h', 'a', 'b', 'c', 'd', 'e', 'f', 'g'])\n\nprint(d.count('h'))  # count occurrences of an item -> 1\n\n# rotate() - rotate the deque n steps\nd.rotate(1) \n# 1 step to the right \n# now deque(['g', 'j', 'i', 'h', 'a', 'b', 'c', 'd', 'e', 'f'])\n\nd.rotate(-2)  \n# 2 steps to the left\n# now deque(['i', 'h', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'j'])\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Common Use Cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implementing BFS or queue-based algorithms in a memory-efficient manner."}),"\n",(0,s.jsx)(n.li,{children:"Handling large sequences with frequent additions/removals at both ends."}),"\n",(0,s.jsx)(n.li,{children:"Sliding window operations where you rotate the deque or pop from left/right as data updates."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-additional-collections-in-python-3",children:"7. Additional Collections in Python 3"}),"\n",(0,s.jsxs)(n.p,{children:["Along with the more frequently used ",(0,s.jsx)(n.code,{children:"namedtuple"}),", ",(0,s.jsx)(n.code,{children:"OrderedDict"}),", ",(0,s.jsx)(n.code,{children:"Counter"}),", ",(0,s.jsx)(n.code,{children:"defaultdict"}),", and ",(0,s.jsx)(n.code,{children:"deque"}),", the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"collections"})})," module also includes the following:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ChainMap"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserDict"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserList"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserString"})})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Each of these provides specialized functionality that can simplify certain programming tasks. You can find more detailed usage in the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/collections.html",children:"official Python docs"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"71-chainmap",children:["7.1 ",(0,s.jsx)(n.code,{children:"ChainMap"})]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ChainMap"})})," groups multiple dictionaries (or other mappings) together so that they can be treated as a single, logical mapping. Lookups scan each mapping in a defined order and return the first match. This is particularly useful for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Layered configurations"}),": For example, merging a \u201cdefaults\u201d dictionary with a \u201cuser settings\u201d dictionary and an \u201cenvironment variable\u201d dictionary, in that priority order."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nested scopes"}),": Simulating scope chains (e.g., local, nonlocal, global) as found in some languages."]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"example-using-chainmap",children:["Example: Using ",(0,s.jsx)(n.code,{children:"ChainMap"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from collections import ChainMap\n\ndefaults = {"theme": "light", "showLineNumbers": True, "autosave": False}\nenv_settings = {"theme": "dark", "autosave": True}\nuser_settings = {"showLineNumbers": False}\n\n# Chain multiple dictionaries\nsettings = ChainMap(user_settings, env_settings, defaults)\n\nprint(settings["theme"])            # \'dark\' -> from env_settings\nprint(settings["showLineNumbers"])  # False  -> from user_settings\nprint(settings["autosave"])         # True   -> from env_settings\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"How it works"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Python checks ",(0,s.jsx)(n.code,{children:"user_settings"})," first."]}),"\n",(0,s.jsxs)(n.li,{children:["If the key is not found, it checks ",(0,s.jsx)(n.code,{children:"env_settings"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Finally, it checks ",(0,s.jsx)(n.code,{children:"defaults"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When assigning a value to a key, the ",(0,s.jsx)(n.strong,{children:"first dictionary"})," in the chain is updated:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"settings[\"theme\"] = \"blue\"\nprint(user_settings)     # {'showLineNumbers': False, 'theme': 'blue'}\nprint(env_settings)      # {'theme': 'dark', 'autosave': True}\nprint(defaults)          # {'theme': 'light', 'showLineNumbers': True, 'autosave': False}\n\n# Notice it did NOT update 'env_settings' or 'defaults'.\n# Instead, it added/overwrote 'theme' in user_settings\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ChainMap"})," also provides useful methods like ",(0,s.jsx)(n.code,{children:"maps"})," (the list of dictionaries), ",(0,s.jsx)(n.code,{children:"new_child()"}),", and ",(0,s.jsx)(n.code,{children:"parents"})," to work with dynamically changing scopes or layered configurations."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"72-userdict",children:["7.2 ",(0,s.jsx)(n.code,{children:"UserDict"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserDict"})})," is a ",(0,s.jsx)(n.strong,{children:"wrapper class around standard dictionary objects"}),". It acts like a dictionary but is designed to be ",(0,s.jsx)(n.strong,{children:"easily extended"})," via subclassing. Instead of subclassing ",(0,s.jsx)(n.code,{children:"dict"})," directly (which can have tricky edge cases), you can subclass ",(0,s.jsx)(n.code,{children:"UserDict"})," and leverage its internal ",(0,s.jsx)(n.code,{children:"data"})," attribute (a regular ",(0,s.jsx)(n.code,{children:"dict"}),") for storing items. This provides a cleaner, more predictable approach to customizing dictionary behavior."]}),"\n",(0,s.jsxs)(n.h4,{id:"example-subclassing-userdict",children:["Example: Subclassing ",(0,s.jsx)(n.code,{children:"UserDict"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import UserDict\n\nclass MyDict(UserDict):\n    def __getitem__(self, key):\n        # Here, we automatically convert the key to lowercase for lookups\n        key = str(key).lower()\n        return super().__getitem__(key)\n    \n    def __setitem__(self, key, value):\n        # Convert key to lowercase on assignment\n        key = str(key).lower()\n        super().__setitem__(key, value)\n\n# Create an instance\nd = MyDict()\nd['KEY'] = \"value\"\nprint(d['kEy'])    # \"value\"\nprint(d.data)      # {'key': 'value'}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enforcing special rules for keys (e.g., case-insensitive or restricted sets of keys)."}),"\n",(0,s.jsx)(n.li,{children:"Adding debugging statements or logging whenever items are added, modified, or removed."}),"\n",(0,s.jsxs)(n.li,{children:["Overriding special dictionary methods without worrying about edge cases in the built-in ",(0,s.jsx)(n.code,{children:"dict"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"73-userlist",children:["7.3 ",(0,s.jsx)(n.code,{children:"UserList"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserList"})})," is similar to ",(0,s.jsx)(n.code,{children:"UserDict"})," but for ",(0,s.jsx)(n.strong,{children:"list-like"})," containers. It provides a wrapper around a standard Python ",(0,s.jsx)(n.code,{children:"list"})," accessible via the ",(0,s.jsx)(n.code,{children:".data"})," attribute. By inheriting from ",(0,s.jsx)(n.code,{children:"UserList"}),", you can create list-like classes with customized behaviors for item insertion, deletion, or retrieval."]}),"\n",(0,s.jsxs)(n.h4,{id:"example-subclassing-userlist",children:["Example: Subclassing ",(0,s.jsx)(n.code,{children:"UserList"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from collections import UserList\n\nclass MyList(UserList):\n    def append(self, item):\n        print(f"Appending {item}...")\n        super().append(item)\n    \n    def pop(self, index=-1):\n        print(f"Popping from index {index}...")\n        return super().pop(index)\n\nmy_list = MyList([1, 2, 3])\n\nmy_list.append(4)           # "Appending 4..."\nprint(my_list)              # [1, 2, 3, 4]\n\npopped_item = my_list.pop() # "Popping from index -1..."\nprint(popped_item)          # 4\nprint(my_list)              # [1, 2, 3]\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Logging, monitoring, or validating data whenever items are added or removed."}),"\n",(0,s.jsx)(n.li,{children:"Restricting certain operations (e.g., limiting maximum length, forbidding certain data types)."}),"\n",(0,s.jsx)(n.li,{children:"Creating specialized list-like objects (e.g., a \u201chistory\u201d list that truncates older entries automatically)."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"74-userstring",children:["7.4 ",(0,s.jsx)(n.code,{children:"UserString"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserString"})})," is a ",(0,s.jsx)(n.strong,{children:"wrapper around standard Python strings"}),". Like ",(0,s.jsx)(n.code,{children:"UserDict"})," and ",(0,s.jsx)(n.code,{children:"UserList"}),", it\u2019s designed to help you easily customize or extend how strings behave without diving into deeper internals. It stores the actual string in the ",(0,s.jsx)(n.code,{children:".data"})," attribute."]}),"\n",(0,s.jsxs)(n.h4,{id:"example-subclassing-userstring",children:["Example: Subclassing ",(0,s.jsx)(n.code,{children:"UserString"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from collections import UserString\n\nclass MyString(UserString):\n    def __init__(self, seq):\n        # Force the string to be uppercase internally\n        super().__init__(str(seq).upper())\n    \n    def append(self, s):\n        # We can\'t actually change an immutable string in place,\n        # but we can create a new string for demonstration\n        self.data = self.data + str(s).upper()\n\ns = MyString("Hello")\nprint(s)               # HELLO\n\ns.append(" world!")\nprint(s)               # HELLO WORLD!\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Creating read-only or partially restricted string objects."}),"\n",(0,s.jsx)(n.li,{children:"Forcing custom transformations (e.g., always store strings in uppercase or remove forbidden characters)."}),"\n",(0,s.jsx)(n.li,{children:"Adding utility methods for specialized string manipulation."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-these-additional-collections",children:"When to Use These Additional Collections?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ChainMap"})}),": Layering multiple dictionaries (settings, environment, defaults) for combined lookups without manually merging them."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserDict"})}),": When you need a dictionary-like object but want to cleanly override or extend built-in dict functionality."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserList"})}),": Custom list behaviors, such as logging, restricting data types, or automatically truncating contents."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UserString"})}),": Specialized string behaviors, like forcing case conventions, logging changes, or disallowing certain operations."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,s.jsxs)(n.p,{children:["These additional classes in the ",(0,s.jsx)(n.code,{children:"collections"})," module (",(0,s.jsx)(n.code,{children:"ChainMap"}),", ",(0,s.jsx)(n.code,{children:"UserDict"}),", ",(0,s.jsx)(n.code,{children:"UserList"}),", ",(0,s.jsx)(n.code,{children:"UserString"}),") can greatly simplify code when you need ",(0,s.jsx)(n.strong,{children:"custom behavior"})," for mappings, lists, or strings. By leveraging these base classes, you avoid the pitfalls of directly subclassing built-in types and gain a more predictable internal structure for your custom container logic."]}),"\n",(0,s.jsxs)(n.p,{children:["Whether you\u2019re merging settings from multiple sources (",(0,s.jsx)(n.code,{children:"ChainMap"}),") or ensuring consistent transformations on your list/string/dictionary data (",(0,s.jsx)(n.code,{children:"User*"})," classes), these tools offer a structured and Pythonic approach to specialized data handling."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-summary-and-when-to-use-which",children:"8. Summary and When to Use Which"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namedtuple"})}),": A lightweight way to create an ",(0,s.jsx)(n.strong,{children:"immutable"})," \u201cobject\u201d with named fields. Great for readable, self-documenting code when returning or storing fixed sets of data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OrderedDict"})}),": Maintains insertion order in a dictionary. Useful for older Python versions (lower than 3.7) or advanced reordering operations that standard dict doesn\u2019t support."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Counter"})}),": Ideal for counting, tallies, or finding the most common items in an iterable. Built for quick frequency analysis."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"defaultdict"})}),": Automatically initializes missing keys with a default (e.g., ",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"list"}),", or any other factory function). Eliminates the need for explicit key checks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"deque"})}),": A double-ended queue with O(1) appends/pops from ",(0,s.jsx)(n.strong,{children:"both ends"}),". Perfect for implementing queues, stacks, or performing rotations."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By using these data types from the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"collections"})})," module, you can make your code more ",(0,s.jsx)(n.strong,{children:"efficient"}),", ",(0,s.jsx)(n.strong,{children:"readable"}),", and ",(0,s.jsx)(n.strong,{children:"focused"})," on the problem at hand\u2014rather than manually re-implementing data structures or housekeeping logic."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);