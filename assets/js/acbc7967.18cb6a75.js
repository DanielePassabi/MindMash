"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[7243],{68597:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>a});var s=i(74848),r=i(28453);const t={id:"python-03",title:"\ud83d\udc0d 03. Dictionaries",sidebar_position:3},c="03. Dictionaries",o={id:"notes/Information Technology/Python/python-03",title:"\ud83d\udc0d 03. Dictionaries",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/03_dictionaries.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-03",permalink:"/MindMash/docs/notes/Information Technology/Python/python-03",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"python-03",title:"\ud83d\udc0d 03. Dictionaries",sidebar_position:3},sidebar:"notesSidebar",previous:{title:"\ud83d\udc0d 02. Tuples",permalink:"/MindMash/docs/notes/Information Technology/Python/python-02"},next:{title:"\ud83d\udc0d 04. Sets",permalink:"/MindMash/docs/notes/Information Technology/Python/python-04"}},d={},a=[{value:"1. Overview of Python Dictionaries",id:"1-overview-of-python-dictionaries",level:2},{value:"2. Creating Dictionaries",id:"2-creating-dictionaries",level:2},{value:"2.1 Using Curly Braces",id:"21-using-curly-braces",level:3},{value:"2.2 Using the <code>dict()</code> Constructor",id:"22-using-the-dict-constructor",level:3},{value:"3. Accessing Items",id:"3-accessing-items",level:2},{value:"3.1 Access by Key",id:"31-access-by-key",level:3},{value:"3.2 Using <code>get()</code>",id:"32-using-get",level:3},{value:"4. Adding and Changing Items",id:"4-adding-and-changing-items",level:2},{value:"5. Deleting Items",id:"5-deleting-items",level:2},{value:"6. Checking for Keys",id:"6-checking-for-keys",level:2},{value:"7. Looping Through Dictionaries",id:"7-looping-through-dictionaries",level:2},{value:"8. Copying Dictionaries",id:"8-copying-dictionaries",level:2},{value:"9. Merging Dictionaries",id:"9-merging-dictionaries",level:2},{value:"9.1 Using <code>update()</code>",id:"91-using-update",level:3},{value:"9.2 Using Dictionary Unpacking (Python 3.9+)",id:"92-using-dictionary-unpacking-python-39",level:3},{value:"10. Possible Key Types",id:"10-possible-key-types",level:2},{value:"11. Nested Dictionaries",id:"11-nested-dictionaries",level:2},{value:"12. Other Useful Dictionary Methods",id:"12-other-useful-dictionary-methods",level:2},{value:"13. Dictionary Comprehensions",id:"13-dictionary-comprehensions",level:2},{value:"14. Ordered or Unordered?",id:"14-ordered-or-unordered",level:2},{value:"15. Summary",id:"15-summary",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"03-dictionaries",children:"03. Dictionaries"})}),"\n",(0,s.jsx)("iframe",{src:"https://www.youtube.com/embed/LTXnQdrwyrw",title:"Dictionaries in Python - Advanced Python 03 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,s.jsxs)(n.p,{children:["Original Link: ",(0,s.jsx)(n.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-overview-of-python-dictionaries",children:"1. Overview of Python Dictionaries"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"dictionary"})," in Python is a collection of key-value pairs characterized by:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unordered"})," (though insertion-ordered in modern Python 3.7+)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Changeable/Mutable"}),": You can add, remove, and modify key-value pairs after creating the dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indexed by keys"}),": Instead of accessing elements by numeric index (as in lists), you access values by using their corresponding keys."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No duplicate keys"}),": Each key within a dictionary must be unique."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Dictionaries are written with curly braces ",(0,s.jsx)(n.code,{children:"{}"})," containing comma-separated key-value pairs. Each pair is written as ",(0,s.jsx)(n.code,{children:"key: value"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-creating-dictionaries",children:"2. Creating Dictionaries"}),"\n",(0,s.jsx)(n.p,{children:"You can create dictionaries in two primary ways:"}),"\n",(0,s.jsx)(n.h3,{id:"21-using-curly-braces",children:"2.1 Using Curly Braces"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"my_dict = {\"name\": \"Max\", \"age\": 28, \"city\": \"New York\"}\nprint(my_dict)\n# {'name': 'Max', 'age': 28, 'city': 'New York'}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"22-using-the-dict-constructor",children:["2.2 Using the ",(0,s.jsx)(n.code,{children:"dict()"})," Constructor"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"my_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")\nprint(my_dict_2)\n# {'name': 'Lisa', 'age': 27, 'city': 'Boston'}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that when using ",(0,s.jsx)(n.code,{children:"dict()"}),", Python treats the parameters as key-value pairs (with the keys as valid identifiers, i.e., not requiring quotes)."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-accessing-items",children:"3. Accessing Items"}),"\n",(0,s.jsx)(n.h3,{id:"31-access-by-key",children:"3.1 Access by Key"}),"\n",(0,s.jsx)(n.p,{children:"Use square brackets with the key name:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'name_in_dict = my_dict["name"]\nprint(name_in_dict)  # Max\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the key does not exist, Python raises a ",(0,s.jsx)(n.code,{children:"KeyError"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"32-using-get",children:["3.2 Using ",(0,s.jsx)(n.code,{children:"get()"})]}),"\n",(0,s.jsxs)(n.p,{children:["If you prefer to avoid ",(0,s.jsx)(n.code,{children:"KeyError"})," exceptions, use the dictionary\u2019s ",(0,s.jsx)(n.code,{children:".get()"})," method, which returns ",(0,s.jsx)(n.code,{children:"None"})," (or a specified default) if the key is not found:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'lastname = my_dict.get("lastname", "Unknown")\nprint(lastname)  # Unknown\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-adding-and-changing-items",children:"4. Adding and Changing Items"}),"\n",(0,s.jsx)(n.p,{children:"To add or modify a key-value pair, assign a value to a key:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Add a new key-value pair\nmy_dict["email"] = "max@xyz.com"\n\n# Modify an existing key\u2019s value\nmy_dict["email"] = "coolmax@xyz.com"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the key already exists, it will be ",(0,s.jsx)(n.strong,{children:"overwritten"})," with the new value."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-deleting-items",children:"5. Deleting Items"}),"\n",(0,s.jsx)(n.p,{children:"There are several ways to remove items from a dictionary:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"del"})})," statement"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'del my_dict["email"]  # removes the key-value pair for "email"\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"pop(key)"})})," method"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Removes the item with the specified key and returns the corresponding value."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'age_value = my_dict.pop("age")\nprint("popped value:", age_value)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"popitem()"})})," method"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Removes and returns the ",(0,s.jsx)(n.strong,{children:"last inserted"})," key-value pair (in Python 3.7+)."]}),"\n",(0,s.jsx)(n.li,{children:"In earlier versions of Python (before 3.7), it removes an arbitrary item."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'popped_item = my_dict.popitem()\nprint("popped item:", popped_item)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"clear()"})})," method"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Removes ",(0,s.jsx)(n.strong,{children:"all"})," key-value pairs, leaving an empty dictionary."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"my_dict.clear()\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-checking-for-keys",children:"6. Checking for Keys"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Using ",(0,s.jsx)(n.code,{children:"in"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'if "name" in my_dict:\n    print(my_dict["name"])\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Using ",(0,s.jsx)(n.code,{children:"try"}),"/",(0,s.jsx)(n.code,{children:"except KeyError"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'try:\n    print(my_dict["firstname"])\nexcept KeyError:\n    print("No key found")\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-looping-through-dictionaries",children:"7. Looping Through Dictionaries"}),"\n",(0,s.jsx)(n.p,{children:"You can iterate through dictionaries in several ways:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Loop over keys"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"for key in my_dict:\n    print(key, my_dict[key])\n"})}),"\n",(0,s.jsx)(n.p,{children:"or explicitly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"for key in my_dict.keys():\n    print(key)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Loop over values"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"for value in my_dict.values():\n    print(value)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Loop over keys and values"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"for key, value in my_dict.items():\n    print(key, value)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-copying-dictionaries",children:"8. Copying Dictionaries"}),"\n",(0,s.jsxs)(n.p,{children:["Be careful when copying references in Python. Assigning one dictionary variable to another ",(0,s.jsx)(n.strong,{children:"does not"})," create an independent copy; it only copies the reference:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"dict_org = {\"name\": \"Max\", \"age\": 28, \"city\": \"New York\"}\ndict_copy = dict_org  # references the same dictionary object in memory\n\ndict_copy[\"name\"] = \"Lisa\"\nprint(dict_copy)  # {'name': 'Lisa', 'age': 28, 'city': 'New York'}\nprint(dict_org)   # {'name': 'Lisa', 'age': 28, 'city': 'New York'} <- also changed\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To create a ",(0,s.jsx)(n.strong,{children:"real copy"}),", use one of the following:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"copy()"})," method"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"dict_copy = dict_org.copy()\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"dict()"})," constructor"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"dict_copy = dict(dict_org)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Warning!",type:"warning",children:[(0,s.jsxs)(n.p,{children:["These methods create a ",(0,s.jsx)(n.strong,{children:"shallow copy"}),", meaning ",(0,s.jsx)(n.strong,{children:"nested"})," structures are still referenced."]}),(0,s.jsxs)(n.p,{children:["To create a copy that is ",(0,s.jsx)(n.strong,{children:"not"})," shallow\u2014i.e., a copy where ",(0,s.jsx)(n.strong,{children:"all"})," nested structures are recursively duplicated rather than merely referenced\u2014you need a ",(0,s.jsx)(n.strong,{children:"deep copy"}),". In Python, this is done using the ",(0,s.jsx)(n.code,{children:"copy.deepcopy()"})," function from the built-in ",(0,s.jsx)(n.code,{children:"copy"})," module:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import copy\n\noriginal_dict = {\"name\": \"Max\", \"hobbies\": [\"football\", \"chess\"]}\ndeep_copied_dict = copy.deepcopy(original_dict)\n\n# Now modifying a nested element in deep_copied_dict will not affect original_dict.\ndeep_copied_dict[\"hobbies\"].append(\"coding\")\n\nprint(original_dict)      # {'name': 'Max', 'hobbies': ['football', 'chess']}\nprint(deep_copied_dict)   # {'name': 'Max', 'hobbies': ['football', 'chess', 'coding']}\n"})}),(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"deepcopy"})," recursively copies all levels of nested data structures so that changes in the copy will not affect the original."]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"9-merging-dictionaries",children:"9. Merging Dictionaries"}),"\n",(0,s.jsxs)(n.h3,{id:"91-using-update",children:["9.1 Using ",(0,s.jsx)(n.code,{children:"update()"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can merge two dictionaries using the ",(0,s.jsx)(n.code,{children:".update()"})," method. Existing keys are overwritten, and new keys are added."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"my_dict = {\"name\": \"Max\", \"age\": 28, \"email\": \"max@xyz.com\"}\nmy_dict_2 = dict(name=\"Lisa\", age=27, city=\"Boston\")\n\nmy_dict.update(my_dict_2)\nprint(my_dict)\n# {'name': 'Lisa', 'age': 27, 'email': 'max@xyz.com', 'city': 'Boston'}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"92-using-dictionary-unpacking-python-39",children:"9.2 Using Dictionary Unpacking (Python 3.9+)"}),"\n",(0,s.jsxs)(n.p,{children:["You can also merge dictionaries with a \u201cunion\u201d operator ",(0,s.jsx)(n.code,{children:"|"})," (introduced in Python 3.9):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"merged_dict = my_dict | my_dict_2\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"10-possible-key-types",children:"10. Possible Key Types"}),"\n",(0,s.jsxs)(n.p,{children:["Dictionary keys must be ",(0,s.jsx)(n.strong,{children:"immutable"}),". Common immutable types include:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strings"}),": ",(0,s.jsx)(n.code,{children:'{"name": "Max"}'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Numbers"}),": ",(0,s.jsx)(n.code,{children:"{3: 9, 6: 36}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tuples"})," (if they contain only immutable elements): ",(0,s.jsx)(n.code,{children:"my_dict = { (8, 7): 15 }"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Lists (or other mutable types) ",(0,s.jsx)(n.strong,{children:"cannot"})," be used as dictionary keys because they are not hashable:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# This will raise a TypeError:\n# my_list = [8, 7]\n# my_dict = {my_list: 15}\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Hashable Objects",type:"info",children:[(0,s.jsxs)(n.p,{children:["In Python, an object is ",(0,s.jsx)(n.strong,{children:"hashable"})," if it has a ",(0,s.jsx)(n.strong,{children:"fixed hash value"})," throughout its lifetime (i.e., it does not change after the object is created) and can be compared to other objects in a way that is consistent with its hash value. Formally, this means the object must:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement a ",(0,s.jsx)(n.code,{children:"__hash__()"})," method that returns an integer (its hash value)."]}),"\n",(0,s.jsxs)(n.li,{children:["Implement an equality method (",(0,s.jsx)(n.code,{children:"__eq__"}),") that is consistent with the hash value:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If two objects compare equal, they must have the ",(0,s.jsx)(n.strong,{children:"same"})," hash value."]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Hashable objects include most ",(0,s.jsx)(n.strong,{children:"immutable"})," built-in objects like ",(0,s.jsx)(n.em,{children:"integers"}),", ",(0,s.jsx)(n.em,{children:"floats"}),", ",(0,s.jsx)(n.em,{children:"strings"}),", and ",(0,s.jsx)(n.em,{children:"tuples"})," containing only immutable types. Because their value cannot change after creation, their hash remains constant. By contrast, ",(0,s.jsx)(n.strong,{children:"mutable"})," types (like ",(0,s.jsx)(n.em,{children:"lists"}),", ",(0,s.jsx)(n.em,{children:"dictionaries"})," themselves, or ",(0,s.jsx)(n.em,{children:"sets"}),") are not hashable, because their contents (and thus their would-be hash) can change over time. This requirement exists so that keys in dictionaries (and elements of sets) remain valid as the underlying data structure uses the hash value for fast lookups."]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"11-nested-dictionaries",children:"11. Nested Dictionaries"}),"\n",(0,s.jsxs)(n.p,{children:["Values in a dictionary can be ",(0,s.jsx)(n.strong,{children:"any"})," Python object, including lists, tuples, or even other dictionaries."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"my_dict_1 = {\"name\": \"Max\", \"age\": 28}\nmy_dict_2 = {\"name\": \"Alex\", \"age\": 25}\nnested_dict = {\"dictA\": my_dict_1, \"dictB\": my_dict_2}\nprint(nested_dict)\n# {'dictA': {'name': 'Max', 'age': 28}, 'dictB': {'name': 'Alex', 'age': 25}}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"12-other-useful-dictionary-methods",children:"12. Other Useful Dictionary Methods"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"get(key, default=None)"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns the value for ",(0,s.jsx)(n.code,{children:"key"})," if present, otherwise returns ",(0,s.jsx)(n.code,{children:"default"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Helpful to avoid ",(0,s.jsx)(n.code,{children:"KeyError"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"setdefault(key, default=None)"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns the value of ",(0,s.jsx)(n.code,{children:"key"})," if in the dictionary; otherwise, inserts ",(0,s.jsx)(n.code,{children:"key"})," with a value of ",(0,s.jsx)(n.code,{children:"default"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"items()"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a view object of key-value pairs."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"keys()"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a view object of keys."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"values()"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns a view object of values."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"13-dictionary-comprehensions",children:"13. Dictionary Comprehensions"}),"\n",(0,s.jsxs)(n.p,{children:["Like list comprehensions, you can create dictionaries using ",(0,s.jsx)(n.strong,{children:"dictionary comprehensions"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"squares = {x: x*x for x in range(1, 6)}\nprint(squares)\n# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is a concise way to create dictionaries without needing an explicit loop and assignment."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"14-ordered-or-unordered",children:"14. Ordered or Unordered?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["In ",(0,s.jsx)(n.strong,{children:"Python 3.7+"}),", the insertion order of dictionary keys is preserved as an implementation detail, and in ",(0,s.jsx)(n.strong,{children:"Python 3.8+"})," it is officially a language feature."]}),"\n",(0,s.jsxs)(n.li,{children:["In ",(0,s.jsx)(n.strong,{children:"older versions"})," (prior to 3.7), dictionaries were generally considered unordered, so you could not rely on the insertion order."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["However, even though Python now preserves insertion order, dictionaries are typically ",(0,s.jsx)(n.strong,{children:"conceptually"})," considered ",(0,s.jsx)(n.strong,{children:"unordered"})," collections, meaning you focus on the mapping rather than positional indices."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"15-summary",children:"15. Summary"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dictionaries"})," in Python are powerful, flexible data structures for mapping ",(0,s.jsx)(n.strong,{children:"keys"})," to ",(0,s.jsx)(n.strong,{children:"values"}),". They are mutable, support dynamic addition and removal of items, and allow any immutable type (strings, numbers, tuples of immutables) to serve as keys. The ability to nest dictionaries, along with the variety of built-in methods (",(0,s.jsx)(n.code,{children:"update()"}),", ",(0,s.jsx)(n.code,{children:"items()"}),", ",(0,s.jsx)(n.code,{children:"pop()"}),", etc.), makes them a go-to choice for representing complex data structures. They are essential for many scenarios, including fast lookups by key and the representation of structured data where each value must be accessed by a meaningful identifier rather than a numeric index."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var s=i(96540);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);