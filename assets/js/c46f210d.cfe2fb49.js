"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[2001],{21603:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var i=t(74848),s=t(28453);const l={id:"python-02",title:"\ud83d\udc0d 02. Tuples",sidebar_position:2},r="02. Tuples",o={id:"notes/Information Technology/Python/python-02",title:"\ud83d\udc0d 02. Tuples",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/02_tuples.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-02",permalink:"/MindMash/docs/notes/Information Technology/Python/python-02",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"python-02",title:"\ud83d\udc0d 02. Tuples",sidebar_position:2},sidebar:"notesSidebar",previous:{title:"\ud83d\udc0d 01. Lists",permalink:"/MindMash/docs/notes/Information Technology/Python/python-01"},next:{title:"\ud83d\udc0d 03. Dictionaries",permalink:"/MindMash/docs/notes/Information Technology/Python/python-03"}},a={},c=[{value:"1. Overview of Python Tuples",id:"1-overview-of-python-tuples",level:2},{value:"2. Reasons to Use a Tuple Over a List",id:"2-reasons-to-use-a-tuple-over-a-list",level:2},{value:"3. Creating Tuples",id:"3-creating-tuples",level:2},{value:"3.1 Single-Element Tuples",id:"31-single-element-tuples",level:3},{value:"3.2 Using the <code>tuple()</code> Constructor",id:"32-using-the-tuple-constructor",level:3},{value:"4. Accessing Tuple Elements",id:"4-accessing-tuple-elements",level:2},{value:"4.1 Negative Indexing",id:"41-negative-indexing",level:3},{value:"5. Immutability: No Changes After Creation",id:"5-immutability-no-changes-after-creation",level:2},{value:"6. Deleting a Tuple",id:"6-deleting-a-tuple",level:2},{value:"7. Iterating Over Tuples",id:"7-iterating-over-tuples",level:2},{value:"8. Checking for Existence of an Item",id:"8-checking-for-existence-of-an-item",level:2},{value:"9. Useful Tuple Methods",id:"9-useful-tuple-methods",level:2},{value:"9.1 <code>len()</code>",id:"91-len",level:3},{value:"9.2 <code>count(x)</code>",id:"92-countx",level:3},{value:"9.3 <code>index(x)</code>",id:"93-indexx",level:3},{value:"9.4 Repetition",id:"94-repetition",level:3},{value:"9.5 Concatenation",id:"95-concatenation",level:3},{value:"9.6 Converting Between Tuples and Lists",id:"96-converting-between-tuples-and-lists",level:3},{value:"9.7 Converting Strings to Tuples",id:"97-converting-strings-to-tuples",level:3},{value:"10. Slicing Tuples",id:"10-slicing-tuples",level:2},{value:"11. Unpacking Tuples",id:"11-unpacking-tuples",level:2},{value:"11.1 Using the Asterisk (<code>*</code>) to Unpack Multiple Elements",id:"111-using-the-asterisk--to-unpack-multiple-elements",level:3},{value:"12. Nested Tuples",id:"12-nested-tuples",level:2},{value:"13. Comparing Tuples and Lists",id:"13-comparing-tuples-and-lists",level:2},{value:"14. Summary",id:"14-summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"02-tuples",children:"02. Tuples"})}),"\n",(0,i.jsx)("iframe",{src:"https://www.youtube.com/embed/Kes8YRV73Io",title:"Tuples in Python - Advanced Python 02 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,i.jsxs)(n.p,{children:["Original Link: ",(0,i.jsx)(n.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-overview-of-python-tuples",children:"1. Overview of Python Tuples"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"tuple"})," is a built-in collection data type in Python with the following characteristics:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ordered"}),": The items have a defined sequence that does not change."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Immutable"}),": You cannot add, remove, or modify items once the tuple is created."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Allows duplicates"}),": Tuples may contain duplicate elements, just like lists."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Tuples are typically used to group elements that logically belong together, especially when those elements should not (or will not) change over the lifetime of the program."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-reasons-to-use-a-tuple-over-a-list",children:"2. Reasons to Use a Tuple Over a List"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logical grouping"}),": Tuples can be used to group heterogeneous (different) data types that logically belong together (e.g., person information like name, age, city)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Immutability"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provides a degree of \u201cwrite-protection\u201d for the data."}),"\n",(0,i.jsx)(n.li,{children:"Can lead to performance and memory optimizations."}),"\n",(0,i.jsx)(n.li,{children:"Tuples can be used as dictionary keys or elements of sets, because they are hashable (immutable). Lists cannot be used in these situations."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slight Performance Benefit"}),": Iterating through a tuple can be slightly faster than iterating through a list (due to immutability and Python\u2019s internal optimizations)."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-creating-tuples",children:"3. Creating Tuples"}),"\n",(0,i.jsxs)(n.p,{children:["Tuples are typically created using parentheses ",(0,i.jsx)(n.code,{children:"("})," ",(0,i.jsx)(n.code,{children:")"}),", separated by commas. Parentheses can be optional in many cases, but using them improves readability."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'tuple_1 = ("Max", 28, "New York")\ntuple_2 = "Linda", 25, "Miami"  # parentheses are optional\n'})}),"\n",(0,i.jsx)(n.h3,{id:"31-single-element-tuples",children:"3.1 Single-Element Tuples"}),"\n",(0,i.jsx)(n.p,{children:"A single-element tuple requires a trailing comma. Otherwise, Python will interpret it as a different object type (e.g., an integer in parentheses)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tuple_3 = (25,)  # single-element tuple\nprint(tuple_3)   # (25,)\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"32-using-the-tuple-constructor",children:["3.2 Using the ",(0,i.jsx)(n.code,{children:"tuple()"})," Constructor"]}),"\n",(0,i.jsxs)(n.p,{children:["You can convert other iterable types (lists, dictionaries, strings, etc.) to a tuple using the ",(0,i.jsx)(n.code,{children:"tuple()"})," constructor."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tuple_4 = tuple([1, 2, 3])  \nprint(tuple_4)   # (1, 2, 3)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-accessing-tuple-elements",children:"4. Accessing Tuple Elements"}),"\n",(0,i.jsx)(n.p,{children:"Tuples are zero-indexed, meaning the first element is at index 0."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'tuple_1 = ("Max", 28, "New York")\nitem = tuple_1[0]\nprint(item)  # Max\n'})}),"\n",(0,i.jsx)(n.h3,{id:"41-negative-indexing",children:"4.1 Negative Indexing"}),"\n",(0,i.jsx)(n.p,{children:"Just like lists, Python allows negative indices for tuples."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"item = tuple_1[-1]\nprint(item)  # New York\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-immutability-no-changes-after-creation",children:"5. Immutability: No Changes After Creation"}),"\n",(0,i.jsxs)(n.p,{children:["Tuples are ",(0,i.jsx)(n.strong,{children:"immutable"}),"; you cannot add or remove items or reassign an item after the tuple is created. Doing so raises a ",(0,i.jsx)(n.code,{children:"TypeError"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'tuple_1 = ("Max", 28, "New York")\ntuple_1[2] = "Boston"  # \u274c Not allowed\n'})}),"\n",(0,i.jsx)(n.p,{children:"Similarly, you cannot append to or remove elements from a tuple."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-deleting-a-tuple",children:"6. Deleting a Tuple"}),"\n",(0,i.jsx)(n.p,{children:"While you cannot delete individual items from a tuple, you can delete the entire tuple object."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'tuple_2 = ("Linda", 25, "Miami")\ndel tuple_2  # the entire tuple is deleted\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-iterating-over-tuples",children:"7. Iterating Over Tuples"}),"\n",(0,i.jsxs)(n.p,{children:["You can iterate over tuples using a ",(0,i.jsx)(n.code,{children:"for"})," loop, just as you would with lists."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'tuple_1 = ("Max", 28, "New York")\nfor item in tuple_1:\n    print(item)\n# Max\n# 28\n# New York\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-checking-for-existence-of-an-item",children:"8. Checking for Existence of an Item"}),"\n",(0,i.jsxs)(n.p,{children:["To check whether an element is present in a tuple, use the ",(0,i.jsx)(n.code,{children:"in"})," keyword:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'if "New York" in tuple_1:\n    print("yes")\nelse:\n    print("no")\n# yes\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"9-useful-tuple-methods",children:"9. Useful Tuple Methods"}),"\n",(0,i.jsxs)(n.h3,{id:"91-len",children:["9.1 ",(0,i.jsx)(n.code,{children:"len()"})]}),"\n",(0,i.jsx)(n.p,{children:"Returns the number of elements in a tuple."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_tuple = ('a','p','p','l','e')\nprint(len(my_tuple))  # 5\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"92-countx",children:["9.2 ",(0,i.jsx)(n.code,{children:"count(x)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Returns the number of times ",(0,i.jsx)(n.code,{children:"x"})," appears in the tuple."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(my_tuple.count('p'))  # 2\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"93-indexx",children:["9.3 ",(0,i.jsx)(n.code,{children:"index(x)"})]}),"\n",(0,i.jsxs)(n.p,{children:["Returns the index of the first occurrence of ",(0,i.jsx)(n.code,{children:"x"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(my_tuple.index('l'))  # 3\n"})}),"\n",(0,i.jsx)(n.h3,{id:"94-repetition",children:"9.4 Repetition"}),"\n",(0,i.jsxs)(n.p,{children:["You can repeat a tuple multiple times using the ",(0,i.jsx)(n.code,{children:"*"})," operator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_tuple = ('a', 'b') * 5\nprint(my_tuple)\n# ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"95-concatenation",children:"9.5 Concatenation"}),"\n",(0,i.jsxs)(n.p,{children:["Tuples can be concatenated using the ",(0,i.jsx)(n.code,{children:"+"})," operator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_tuple = (1,2,3) + (4,5,6)\nprint(my_tuple)\n# (1, 2, 3, 4, 5, 6)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"96-converting-between-tuples-and-lists",children:"9.6 Converting Between Tuples and Lists"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_list = ['a', 'b', 'c', 'd']\nlist_to_tuple = tuple(my_list)\nprint(list_to_tuple)  # ('a', 'b', 'c', 'd')\n\ntuple_to_list = list(list_to_tuple)\nprint(tuple_to_list)  # ['a', 'b', 'c', 'd']\n"})}),"\n",(0,i.jsx)(n.h3,{id:"97-converting-strings-to-tuples",children:"9.7 Converting Strings to Tuples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"string_to_tuple = tuple(\"Hello\")\nprint(string_to_tuple)  # ('H', 'e', 'l', 'l', 'o')\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"10-slicing-tuples",children:"10. Slicing Tuples"}),"\n",(0,i.jsxs)(n.p,{children:["Like lists and strings, you can slice tuples to extract sub-parts using ",(0,i.jsx)(n.code,{children:"[start:stop:step]"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"a = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nb = a[1:3]    # from index 1 up to (but not including) 3\nprint(b)      # (2, 3)\n\nb = a[2:]     # from index 2 to the end\nprint(b)      # (3, 4, 5, 6, 7, 8, 9, 10)\n\nb = a[:3]     # from beginning up to (not including) index 3\nprint(b)      # (1, 2, 3)\n\nb = a[::2]    # from start to end, step by 2\nprint(b)      # (1, 3, 5, 7, 9)\n\nb = a[::-1]   # reverse the tuple\nprint(b)      # (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"11-unpacking-tuples",children:"11. Unpacking Tuples"}),"\n",(0,i.jsx)(n.p,{children:"You can unpack tuple elements into individual variables:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'tuple_1 = ("Max", 28, "New York")\nname, age, city = tuple_1\nprint(name)  # Max\nprint(age)   # 28\nprint(city)  # New York\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"111-using-the-asterisk--to-unpack-multiple-elements",children:["11.1 Using the Asterisk (",(0,i.jsx)(n.code,{children:"*"}),") to Unpack Multiple Elements"]}),"\n",(0,i.jsxs)(n.p,{children:["If you don\u2019t know (or don\u2019t need) all elements, you can gather them into a list using ",(0,i.jsx)(n.code,{children:"*"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_tuple = (0, 1, 2, 3, 4, 5)\nitem_first, *items_between, item_last = my_tuple\nprint(item_first)     # 0\nprint(items_between)  # [1, 2, 3, 4]\nprint(item_last)      # 5\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"12-nested-tuples",children:"12. Nested Tuples"}),"\n",(0,i.jsx)(n.p,{children:"Tuples can contain other tuples (or any other Python objects), forming nested structures:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"a = ((0, 1), ('age', 'height'))\nprint(a)        # ((0, 1), ('age', 'height'))\nprint(a[0])     # (0, 1)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"13-comparing-tuples-and-lists",children:"13. Comparing Tuples and Lists"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Usage"}),": Tuples can use slightly less memory than lists with the same number of items, due to their immutability."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Creating or iterating over a tuple can be slightly faster than a list."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys\nmy_list = [0, 1, 2, "hello", True]\nmy_tuple = (0, 1, 2, "hello", True)\n\nprint(sys.getsizeof(my_list), "bytes")\nprint(sys.getsizeof(my_tuple), "bytes")\n# e.g. 104 bytes (list)\n#      88 bytes (tuple)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also compare creation times using ",(0,i.jsx)(n.code,{children:"timeit"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import timeit\n\nprint(timeit.timeit(stmt="[0, 1, 2, 3, 4, 5]", number=1000000))\nprint(timeit.timeit(stmt="(0, 1, 2, 3, 4, 5)", number=1000000))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Tuples are often faster to create, reflecting their immutability and simpler internal structure."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"14-summary",children:"14. Summary"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tuples"})," in Python are ",(0,i.jsx)(n.strong,{children:"ordered"})," and ",(0,i.jsx)(n.strong,{children:"immutable"})," collections. They are extremely useful for grouping data that should not change throughout the lifecycle of a program. Their immutability allows Python to make optimizations that can result in better performance and memory usage compared to lists. They can also serve as valid dictionary keys (or set elements) because they are hashable, whereas lists cannot."]}),"\n",(0,i.jsx)(n.p,{children:"When to use a tuple vs. a list often comes down to intent:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use a ",(0,i.jsx)(n.strong,{children:"tuple"})," when you have data that is logically grouped and should not change."]}),"\n",(0,i.jsxs)(n.li,{children:["Use a ",(0,i.jsx)(n.strong,{children:"list"})," when the data might need to be modified, reordered, or extended over time."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By understanding these characteristics, you can make better design choices and take full advantage of Python\u2019s data structures in your projects."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);