"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[9477],{35127:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var t=s(74848),i=s(28453);const r={id:"python-04",title:"\ud83d\udc0d 04. Sets",sidebar_position:4},o="04. Sets",d={id:"notes/Information Technology/Python/python-04",title:"\ud83d\udc0d 04. Sets",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/04_sets.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-04",permalink:"/MindMash/docs/notes/Information Technology/Python/python-04",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"python-04",title:"\ud83d\udc0d 04. Sets",sidebar_position:4},sidebar:"notesSidebar",previous:{title:"\ud83d\udc0d 03. Dictionaries",permalink:"/MindMash/docs/notes/Information Technology/Python/python-03"},next:{title:"\ud83d\udccd Checkpoint 01",permalink:"/MindMash/docs/notes/Information Technology/Python/python-04.1"}},l={},c=[{value:"1. Overview of Python Sets",id:"1-overview-of-python-sets",level:2},{value:"2. Creating Sets",id:"2-creating-sets",level:2},{value:"2.1 Using Curly Braces",id:"21-using-curly-braces",level:3},{value:"2.2 Using the <code>set()</code> Constructor",id:"22-using-the-set-constructor",level:3},{value:"3. Adding Elements",id:"3-adding-elements",level:2},{value:"4. Removing Elements",id:"4-removing-elements",level:2},{value:"5. Checking Membership",id:"5-checking-membership",level:2},{value:"6. Iterating Over a Set",id:"6-iterating-over-a-set",level:2},{value:"7. Set Operations: Union and Intersection",id:"7-set-operations-union-and-intersection",level:2},{value:"7.1 Union",id:"71-union",level:3},{value:"7.2 Intersection",id:"72-intersection",level:3},{value:"8. Difference of Sets",id:"8-difference-of-sets",level:2},{value:"9. Updating Sets In-place",id:"9-updating-sets-in-place",level:2},{value:"10. Copying Sets",id:"10-copying-sets",level:2},{value:"11. Subset, Superset, and Disjoint",id:"11-subset-superset-and-disjoint",level:2},{value:"12. Frozenset",id:"12-frozenset",level:2},{value:"13. Use Cases and Best Practices",id:"13-use-cases-and-best-practices",level:2},{value:"14. Summary",id:"14-summary",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"04-sets",children:"04. Sets"})}),"\n",(0,t.jsx)("iframe",{src:"https://www.youtube.com/embed/Qs3BSFZnZSI",title:"Sets in Python - Advanced Python 04 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,t.jsxs)(n.p,{children:["Original Link: ",(0,t.jsx)(n.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"1-overview-of-python-sets",children:"1. Overview of Python Sets"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"set"})," in Python is:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unordered"}),": The items have no defined order, so you cannot rely on a specific ordering of elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unindexed"}),": There are no numeric indexes for set elements (unlike lists). You access items by value rather than by position."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mutable"}),": You can add or remove elements after the set is created."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No duplicates"}),": Each element in a set is unique. If you add an element that already exists, it will have no effect."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Sets are typically used to perform membership tests (check if an item is in a set) and perform set operations like union, intersection, and difference\u2014often for tasks like deduplication or mathematical set algebra."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-creating-sets",children:"2. Creating Sets"}),"\n",(0,t.jsx)(n.p,{children:"There are two primary ways to create a set:"}),"\n",(0,t.jsx)(n.h3,{id:"21-using-curly-braces",children:"2.1 Using Curly Braces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_set = {\"apple\", \"banana\", \"cherry\"}\nprint(my_set)\n# Example output (order may vary): {'banana', 'apple', 'cherry'}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"22-using-the-set-constructor",children:["2.2 Using the ",(0,t.jsx)(n.code,{children:"set()"})," Constructor"]}),"\n",(0,t.jsxs)(n.p,{children:["You can also create a set from any ",(0,t.jsx)(n.strong,{children:"iterable"}),", such as a list, tuple, or string:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_set_2 = set([\"one\", \"two\", \"three\"])\nmy_set_3 = set((\"one\", \"two\", \"three\"))\nprint(my_set_2)  # {'three', 'one', 'two'}\n\nmy_set_4 = set(\"aaabbbcccdddeeeeeffff\")\nprint(my_set_4)  # {'b', 'c', 'd', 'e', 'f', 'a'}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": Creating an empty set cannot be done with ",(0,t.jsx)(n.code,{children:"{}"}),", since ",(0,t.jsx)(n.code,{children:"{}"})," creates an empty dictionary. Instead:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"a = set()  # creates an empty set\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"3-adding-elements",children:"3. Adding Elements"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"add()"})," method to add elements to an existing set:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_set = set()\nmy_set.add(42)\nmy_set.add(True)\nmy_set.add(\"Hello\")\nprint(my_set)\n# Example output: {True, 42, 'Hello'}\n\n# If an element already exists, adding it again has no effect\nmy_set.add(42)\nprint(my_set)  # unchanged\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"4-removing-elements",children:"4. Removing Elements"}),"\n",(0,t.jsx)(n.p,{children:"Several methods are available to remove elements:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"remove(x)"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Removes ",(0,t.jsx)(n.code,{children:"x"})," from the set; raises a ",(0,t.jsx)(n.code,{children:"KeyError"})," if ",(0,t.jsx)(n.code,{children:"x"})," is not present."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_set = {"apple", "banana", "cherry"}\nmy_set.remove("apple")\nprint(my_set)  # {\'banana\', \'cherry\'}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# my_set.remove("orange")  # KeyError if "orange" is not in the set\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"discard(x)"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Removes ",(0,t.jsx)(n.code,{children:"x"})," from the set if present; does ",(0,t.jsx)(n.strong,{children:"nothing"})," if ",(0,t.jsx)(n.code,{children:"x"})," is not in the set."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_set.discard("cherry")\nmy_set.discard("blueberry")  # does nothing\nprint(my_set)\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"pop()"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Removes ",(0,t.jsx)(n.strong,{children:"and returns"})," a random element (in practice, it removes an arbitrary element, but \u201crandom\u201d is not guaranteed)."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'a = {True, 2, False, "hi", "hello"}\npopped = a.pop()  \nprint(popped)  # e.g., could be \'hi\' or any other element\nprint(a)       # the remaining elements\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"clear()"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Removes ",(0,t.jsx)(n.strong,{children:"all"})," elements from the set, leaving it empty."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_set.clear()\nprint(my_set)  # set()\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"5-checking-membership",children:"5. Checking Membership"}),"\n",(0,t.jsx)(n.p,{children:"Checking if an element exists in a set is usually O(1) on average:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_set = {"apple", "banana", "cherry"}\nif "apple" in my_set:\n    print("yes")  # yes\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"6-iterating-over-a-set",children:"6. Iterating Over a Set"}),"\n",(0,t.jsxs)(n.p,{children:["You can iterate over a set using a ",(0,t.jsx)(n.code,{children:"for"})," loop. The order is not guaranteed:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'my_set = {"apple", "banana", "cherry"}\nfor item in my_set:\n    print(item)\n# Output could be in any order, e.g.:\n# banana\n# apple\n# cherry\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"7-set-operations-union-and-intersection",children:"7. Set Operations: Union and Intersection"}),"\n",(0,t.jsx)(n.h3,{id:"71-union",children:"7.1 Union"}),"\n",(0,t.jsx)(n.p,{children:"Combines elements from both sets, removing duplicates."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method"}),": ",(0,t.jsx)(n.code,{children:"A.union(B)"})," or ",(0,t.jsx)(n.code,{children:"A | B"})]}),"\n",(0,t.jsx)(n.li,{children:"This operation does not modify the original sets unless you use an \u201cupdate\u201d version of the method."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"odds = {1, 3, 5, 7, 9}\nevens = {0, 2, 4, 6, 8}\n\nu = odds.union(evens)  # or odds | evens\nprint(u)               # {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"72-intersection",children:"7.2 Intersection"}),"\n",(0,t.jsx)(n.p,{children:"Takes the elements common to both sets."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method"}),": ",(0,t.jsx)(n.code,{children:"A.intersection(B)"})," or ",(0,t.jsx)(n.code,{children:"A & B"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"primes = {2, 3, 5, 7}\ni = odds.intersection(primes)  # or odds & primes\nprint(i)  # {3, 5, 7}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"8-difference-of-sets",children:"8. Difference of Sets"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A.difference(B)"})})," or ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A - B"})}),": Elements in A but not in B."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"B.difference(A)"})})," or ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"B - A"})}),": Elements in B but not in A."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A.symmetric_difference(B)"})})," or ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A ^ B"})}),": Elements in either A or B but not in both."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"setA = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nsetB = {1, 2, 3, 10, 11, 12}\n\ndiff = setA.difference(setB)  \nprint(diff)  # {4, 5, 6, 7, 8, 9}\n\ndiff_sym = setA.symmetric_difference(setB)\nprint(diff_sym)  # {4, 5, 6, 7, 8, 9, 10, 11, 12}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"9-updating-sets-in-place",children:"9. Updating Sets In-place"}),"\n",(0,t.jsx)(n.p,{children:"Instead of returning a new set, you can update an existing set:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"setA.update(setB)"})}),": Add elements from ",(0,t.jsx)(n.code,{children:"setB"})," to ",(0,t.jsx)(n.code,{children:"setA"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"setA.intersection_update(setB)"})}),": Keep only elements found in both ",(0,t.jsx)(n.code,{children:"setA"})," and ",(0,t.jsx)(n.code,{children:"setB"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"setA.difference_update(setB)"})}),": Remove elements found in ",(0,t.jsx)(n.code,{children:"setB"})," from ",(0,t.jsx)(n.code,{children:"setA"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"setA.symmetric_difference_update(setB)"})}),": Keep only elements found in either ",(0,t.jsx)(n.code,{children:"setA"})," or ",(0,t.jsx)(n.code,{children:"setB"})," but not both."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"setA = {1, 2, 3, 4, 5}\nsetB = {3, 4, 5, 6, 7}\n\nsetA.update(setB)\nprint(setA)  # {1, 2, 3, 4, 5, 6, 7}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"10-copying-sets",children:"10. Copying Sets"}),"\n",(0,t.jsx)(n.p,{children:"Be mindful of reference copying:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"set_org = {1, 2, 3, 4, 5}\nset_copy = set_org  # both refer to the same set\n\nset_copy.update([6, 7])\nprint(set_copy)  # {1, 2, 3, 4, 5, 6, 7}\nprint(set_org)   # {1, 2, 3, 4, 5, 6, 7}  <- also changed\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To create an actual copy, use ",(0,t.jsx)(n.code,{children:"copy()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"set_org = {1, 2, 3, 4, 5}\nset_copy = set_org.copy()\nset_copy.update([6, 7])\nprint(set_copy)  # {1, 2, 3, 4, 5, 6, 7}\nprint(set_org)   # {1, 2, 3, 4, 5}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"11-subset-superset-and-disjoint",children:"11. Subset, Superset, and Disjoint"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A.issubset(B)"})}),": True if every element of A is in B. Also ",(0,t.jsx)(n.code,{children:"A <= B"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A.issuperset(B)"})}),": True if every element of B is in A. Also ",(0,t.jsx)(n.code,{children:"A >= B"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"A.isdisjoint(B)"})}),": True if A and B share no common elements."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"setA = {1, 2, 3, 4, 5, 6}\nsetB = {1, 2, 3}\n\nprint(setA.issubset(setB))    # False\nprint(setB.issubset(setA))    # True\n\nprint(setA.issuperset(setB))  # True\nprint(setB.issuperset(setA))  # False\n\nsetC = {7, 8, 9}\nprint(setA.isdisjoint(setB))  # False\nprint(setA.isdisjoint(setC))  # True\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"12-frozenset",children:"12. Frozenset"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"frozenset"})," is an ",(0,t.jsx)(n.strong,{children:"immutable"})," version of a set. Once created, you cannot add, remove, or modify elements."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"a = frozenset([0, 1, 2, 3, 4])\n# a.add(5)        # not allowed\n# a.remove(1)     # not allowed\n\nodds = frozenset({1, 3, 5, 7, 9})\nevens = frozenset({0, 2, 4, 6, 8})\nprint(odds.union(evens))          # frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\nprint(odds.intersection(evens))   # frozenset()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Frozensets are ",(0,t.jsx)(n.strong,{children:"hashable"}),", meaning they can be used as dictionary keys or elements of other sets, unlike normal (mutable) sets."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"13-use-cases-and-best-practices",children:"13. Use Cases and Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Membership Testing"}),": Sets provide O(1) average time complexity for ",(0,t.jsx)(n.code,{children:"in"})," checks, making them great for membership tests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eliminating Duplicates"}),": Converting a list to a set automatically removes any duplicates."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set Algebra"}),": Union, intersection, and difference operations are common in data processing (e.g., working with categories or sets of IDs)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutable Frozensets"}),": Use a ",(0,t.jsx)(n.code,{children:"frozenset"})," when you want to store a set of items in a data structure that requires immutability (like a dictionary key)."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"14-summary",children:"14. Summary"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Sets"})," in Python are ",(0,t.jsx)(n.strong,{children:"unordered, mutable"})," collections with ",(0,t.jsx)(n.strong,{children:"unique"})," elements. They excel at membership testing, deduplication, and performing set-theoretic operations (union, intersection, difference, etc.). The related ",(0,t.jsx)(n.strong,{children:"frozenset"})," is immutable and can be used in contexts where a hashable type is required. By understanding these characteristics and methods\u2014such as adding, removing, updating, and copying sets\u2014you can more effectively handle tasks involving unique collections of items."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);