"use strict";(self.webpackChunkmind_mash=self.webpackChunkmind_mash||[]).push([[4313],{13949:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=i(74848),r=i(28453);const t={id:"python-05",title:"\ud83d\udc0d 05. Strings",sidebar_position:6},o="05. Strings",l={id:"notes/Information Technology/Python/python-05",title:"\ud83d\udc0d 05. Strings",description:"<iframe",source:"@site/docs/notes/Information Technology/Python/05_strings.md",sourceDirName:"notes/Information Technology/Python",slug:"/notes/Information Technology/Python/python-05",permalink:"/MindMash/docs/notes/Information Technology/Python/python-05",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"python-05",title:"\ud83d\udc0d 05. Strings",sidebar_position:6},sidebar:"notesSidebar",previous:{title:"\ud83d\udccd Checkpoint 01",permalink:"/MindMash/docs/notes/Information Technology/Python/python-04.1"},next:{title:"\ud83d\udc0d 06. Collections",permalink:"/MindMash/docs/notes/Information Technology/Python/python-06"}},a={},c=[{value:"1. Overview of Python Strings",id:"1-overview-of-python-strings",level:2},{value:"2. Creating Strings",id:"2-creating-strings",level:2},{value:"2.1 Single or Double Quotes",id:"21-single-or-double-quotes",level:3},{value:"2.2 Escaping Characters",id:"22-escaping-characters",level:3},{value:"2.3 Triple Quotes for Multiline Strings",id:"23-triple-quotes-for-multiline-strings",level:3},{value:"2.4 Line Continuation with a Backslash",id:"24-line-continuation-with-a-backslash",level:3},{value:"3. Accessing Characters and Substrings",id:"3-accessing-characters-and-substrings",level:2},{value:"4. String Concatenation",id:"4-string-concatenation",level:2},{value:"5. Iterating Over a String",id:"5-iterating-over-a-string",level:2},{value:"6. Checking Membership",id:"6-checking-membership",level:2},{value:"7. Useful String Methods",id:"7-useful-string-methods",level:2},{value:"8. String Formatting",id:"8-string-formatting",level:2},{value:"8.1 <code>.format()</code> Method",id:"81-format-method",level:3},{value:"8.2 Old Style (<code>%</code> Operator)",id:"82-old-style--operator",level:3},{value:"8.3 f-Strings (Python 3.6+)",id:"83-f-strings-python-36",level:3},{value:"9. More on Immutability and Performance",id:"9-more-on-immutability-and-performance",level:2},{value:"10. Common String Use Cases",id:"10-common-string-use-cases",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"05-strings",children:"05. Strings"})}),"\n",(0,s.jsx)("iframe",{src:"https://www.youtube.com/embed/e6ivlABOYRI",title:"Strings in Python - Advanced Python 05 - Programming Tutorial",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,className:"video-holidays"}),"\n",(0,s.jsxs)(e.p,{children:["Original Link: ",(0,s.jsx)(e.a,{href:"https://www.python-engineer.com/courses/advancedpython/",children:"Advanced Python"})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"1-overview-of-python-strings",children:"1. Overview of Python Strings"}),"\n",(0,s.jsxs)(e.p,{children:["A ",(0,s.jsx)(e.strong,{children:"string"})," in Python is a ",(0,s.jsx)(e.strong,{children:"sequence of characters"}),". Python uses ",(0,s.jsx)(e.strong,{children:"Unicode"})," internally to represent characters, which means it supports a wide range of languages and symbols."]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"String literals"})," can be enclosed in either ",(0,s.jsx)(e.strong,{children:"single quotes"})," (",(0,s.jsx)(e.code,{children:"' '"}),") or ",(0,s.jsx)(e.strong,{children:"double quotes"})," (",(0,s.jsx)(e.code,{children:'" "'}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Strings are immutable"}),": Once created, they cannot be changed in place. Operations that appear to modify a string actually create a new one."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"2-creating-strings",children:"2. Creating Strings"}),"\n",(0,s.jsx)(e.h3,{id:"21-single-or-double-quotes",children:"2.1 Single or Double Quotes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"my_string = 'Hello'\nmy_string = \"Hello\"\n"})}),"\n",(0,s.jsx)(e.p,{children:"Both are valid; the choice typically depends on readability or the need to include quotes inside the string."}),"\n",(0,s.jsx)(e.h3,{id:"22-escaping-characters",children:"2.2 Escaping Characters"}),"\n",(0,s.jsx)(e.p,{children:"Use the backslash to escape quotes or special characters:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"my_string = 'I\\' m a \"Geek\"'\nmy_string = \"I\\' m a \\'Geek\\'\"\nprint(my_string)\n# I' m a 'Geek'\n"})}),"\n",(0,s.jsx)(e.h3,{id:"23-triple-quotes-for-multiline-strings",children:"2.3 Triple Quotes for Multiline Strings"}),"\n",(0,s.jsxs)(e.p,{children:["Triple-quoted strings (",(0,s.jsx)(e.code,{children:'""" """'})," or ",(0,s.jsx)(e.code,{children:"''' '''"}),") can span multiple lines:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'my_string = """Hello\nWorld"""\nprint(my_string)\n# Hello\n# World\n'})}),"\n",(0,s.jsx)(e.h3,{id:"24-line-continuation-with-a-backslash",children:"2.4 Line Continuation with a Backslash"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'my_string = "Hello \\\nWorld"\nprint(my_string)\n# Hello World\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"3-accessing-characters-and-substrings",children:"3. Accessing Characters and Substrings"}),"\n",(0,s.jsxs)(e.p,{children:["Use ",(0,s.jsx)(e.strong,{children:"indexing"})," to access characters in a string, or ",(0,s.jsx)(e.strong,{children:"slicing"})," to access substrings:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"my_string = \"Hello World\"\nchar_0 = my_string[0]        # 'H'\nsub_1_3 = my_string[1:3]     # 'el' (indices 1,2)\nsub_start = my_string[:5]    # 'Hello'\nsub_end = my_string[6:]      # 'World'\nstep2 = my_string[::2]       # 'HloWrd' (every 2nd char)\nreverse = my_string[::-1]    # 'dlroW olleH'\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Note"}),": Python uses zero-based indexing, and the ",(0,s.jsx)(e.strong,{children:"end index"})," in a slice is exclusive (not included)."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"4-string-concatenation",children:"4. String Concatenation"}),"\n",(0,s.jsxs)(e.p,{children:["Strings can be concatenated with the ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"+"})})," operator:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'greeting = "Hello"\nname = "Tom"\nsentence = greeting + " " + name\nprint(sentence)  # Hello Tom\n'})}),"\n",(0,s.jsxs)(e.p,{children:["However, repeated concatenation using ",(0,s.jsx)(e.code,{children:"+"})," in a loop can be inefficient; see the ",(0,s.jsx)(e.a,{href:"#9-more-on-immutability-and-performance",children:"Immutability and Performance"})," section for best practices."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"5-iterating-over-a-string",children:"5. Iterating Over a String"}),"\n",(0,s.jsxs)(e.p,{children:["Strings are iterable sequences, so you can use a ",(0,s.jsx)(e.code,{children:"for"})," loop:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'my_string = "Hello"\nfor char in my_string:\n    print(char)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"6-checking-membership",children:"6. Checking Membership"}),"\n",(0,s.jsxs)(e.p,{children:["Check if a character or substring is in a string using the ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"in"})})," keyword:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'if "e" in "Hello":\n    print("yes")\nif "llo" in "Hello":\n    print("yes")\n# yes\n# yes\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"7-useful-string-methods",children:"7. Useful String Methods"}),"\n",(0,s.jsx)(e.p,{children:"Below are some of the most common built-in string methods:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'my_string = "     Hello World "\nmy_string = my_string.strip()  # remove leading and trailing whitespaces\nprint(my_string)               # "Hello World"\nprint(len(my_string))          # number of characters -> 11\n\nprint(my_string.upper())       # "HELLO WORLD"\nprint(my_string.lower())       # "hello world"\n\nprint("hello".startswith("he"))  # True\nprint("hello".endswith("llo"))   # True\n\nprint("Hello".find("o"))       # first index of \'o\', or -1 if not found -> 4\nprint("Hello".count("e"))      # count occurrences of \'e\' -> 1\n\n# replace occurrences of a substring (returns a new string)\nmessage = "Hello World"\nnew_message = message.replace("World", "Universe")\nprint(new_message)             # "Hello Universe"\n\n# splitting and joining\nmy_string = "how are you doing"\nsplit_list = my_string.split() # split by whitespace -> [\'how\', \'are\', \'you\', \'doing\']\nmy_string2 = "one,two,three"\nsplit_list2 = my_string2.split(",") # [\'one\', \'two\', \'three\']\n\nmy_list = ["How", "are", "you", "doing"]\njoined_str = " ".join(my_list)  # "How are you doing"\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"8-string-formatting",children:"8. String Formatting"}),"\n",(0,s.jsxs)(e.h3,{id:"81-format-method",children:["8.1 ",(0,s.jsx)(e.code,{children:".format()"})," Method"]}),"\n",(0,s.jsxs)(e.p,{children:["Use braces ",(0,s.jsx)(e.code,{children:"{}"})," as placeholders:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'a = "Hello {0} and {1}".format("Bob", "Tom")\n# "Hello Bob and Tom"\n\na = "The integer value is {}".format(2)\n# "The integer value is 2"\n\na = "The float value is {0:.3f}".format(2.1234)\n# "The float value is 2.123"\n'})}),"\n",(0,s.jsxs)(e.p,{children:["You can specify formatting codes (like ",(0,s.jsx)(e.code,{children:".3f"})," for floats or ",(0,s.jsx)(e.code,{children:":b"})," for binary)."]}),"\n",(0,s.jsxs)(e.h3,{id:"82-old-style--operator",children:["8.2 Old Style (",(0,s.jsx)(e.code,{children:"%"})," Operator)"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'print("Hello %s and %s" % ("Bob", "Tom"))\nval = 3.14159265359\nprint("The decimal value is %d" % val)   # 3.14159265359 -> 3\nprint("The float value is %.2f" % val)   # 3.14\n'})}),"\n",(0,s.jsx)(e.h3,{id:"83-f-strings-python-36",children:"8.3 f-Strings (Python 3.6+)"}),"\n",(0,s.jsx)(e.p,{children:"f-Strings provide a concise syntax:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'name = "Eric"\nage = 25\nprint(f"Hello, {name}. You are {age}.")\n# Hello, Eric. You are 25.\n\npi = 3.14159\nprint(f"Pi is {pi:.3f}")\n# Pi is 3.142\n\nprint(f"The value is {2 * 60}")\n# The value is 120\n'})}),"\n",(0,s.jsx)(e.p,{children:"They allow direct expressions inside the braces."}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"9-more-on-immutability-and-performance",children:"9. More on Immutability and Performance"}),"\n",(0,s.jsxs)(e.p,{children:["Because strings in Python are ",(0,s.jsx)(e.strong,{children:"immutable"}),", concatenating large numbers of strings with ",(0,s.jsx)(e.code,{children:"+"})," repeatedly can be inefficient. Each concatenation creates a new string in memory."]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# Inefficient approach\nfrom timeit import default_timer as timer\nmy_list = ["a"] * 1000000\n\nstart = timer()\nresult_str = ""\nfor char in my_list:\n    result_str += char\nend = timer()\nprint("Concatenate with +:", end - start, "seconds")\n\n# Efficient approach\nstart = timer()\nresult_str = "".join(my_list)\nend = timer()\nprint("Concatenate with join():", end - start, "seconds")\n\n# On i7-14700KF\n# Concatenate with +: 7.389741700000741 seconds\n# Concatenate with join(): 0.0029293999996298226 seconds\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Using ",(0,s.jsx)(e.code,{children:'"".join(...)'})," is much faster and more memory-friendly for large-scale concatenations."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"10-common-string-use-cases",children:"10. Common String Use Cases"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"User Messages / UI"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Displaying messages, prompts, or logs in a user interface."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Data Parsing and Manipulation"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Splitting, joining, or searching within strings (e.g., reading CSV data)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Building File Paths, URLs"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Constructing dynamic paths or URLs through string concatenation and formatting."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Template Rendering"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Creating dynamic content in templates (often used in web frameworks)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Text Processing"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Pattern matching, data cleaning, and analysis (with or without ",(0,s.jsx)(e.code,{children:"re"}),"\u2014the regular expressions library)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(e.p,{children:["Python ",(0,s.jsx)(e.strong,{children:"strings"})," are versatile, immutable sequences of Unicode characters that form the backbone of text processing. From simple output to complex data parsing, strings lie at the heart of most Python applications. Their immutability ensures reliability in multi-step operations, while a rich set of built-in methods (for splitting, joining, searching, and formatting) covers the majority of common use cases."]}),"\n",(0,s.jsxs)(e.p,{children:["Remember to use ",(0,s.jsx)(e.strong,{children:"f-strings"})," (Python 3.6+) for elegant and efficient formatting, and switch to ",(0,s.jsx)(e.code,{children:"join()"})," when building large strings repeatedly to avoid the performance pitfalls of repeated concatenation."]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function o(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);